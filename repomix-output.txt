This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: app
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
app/
  about-us/
    page.tsx
  api/
    leads/
      capture-email/
        route.ts
      complete/
        route.ts
  cases/
    page.tsx
  components/
    sections/
      Comparison.tsx
      FinalCTA.tsx
      Footer.tsx
      Guarantees.tsx
      HeroSection.tsx
      ProcessTimeline.tsx
      SolutionSection.tsx
    ui/
      button/
        index.tsx
      examples/
        ButtonExample.tsx
      CtaButton.tsx
      LeadForm.tsx
      Navigation.tsx
  contexts/
    LeadFormContext.tsx
  how-we-work/
    page.tsx
  lib/
    db/
      migrations/
        schema.sql
      index.ts
      schema.ts
    rate-limit.ts
    utils.ts
  shadcn-components/
    page.tsx
  globals.css
  layout.tsx
  page.tsx
  providers.tsx

================================================================
Files
================================================================

================
File: app/components/sections/FinalCTA.tsx
================
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { useLeadForm } from '../../contexts/LeadFormContext';

const FinalCTA = () => {
  const [spotsLeft] = useState(5);
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });
  
  const { openLeadForm, isFormSubmitted } = useLeadForm();

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  const container = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15
      }
    }
  };

  return (
    <section id="contact" className="py-20 bg-deep-navy text-white relative overflow-hidden">
      {/* Background pattern/gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-iris-purple/20 to-deep-navy z-0"></div>
      
      <div ref={ref} className="container mx-auto px-6 md:px-12 relative z-10 max-w-6xl">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={container}
          className="flex flex-col lg:flex-row gap-8 items-center"
        >
          {/* Left Card - Risk Guarantee */}
          <motion.div variants={fadeUp} className="w-full lg:w-1/2">
            <motion.div 
              className="bg-white/10 backdrop-blur-sm p-8 rounded-2xl border border-white/10 shadow-glass relative h-full"
              whileHover={{ 
                scale: 1.01,
                boxShadow: "0 20px 40px rgba(0,0,0,0.2)",
                transition: { duration: 0.3 }
              }}
            >
              <div className="absolute -top-5 left-8 bg-mint-green text-deep-navy px-6 py-2 rounded-full font-semibold text-sm">
                Our Zero-Risk Guarantee
              </div>
              
              <div className="flex items-start gap-4 mt-8 mb-6">
                <div className="relative flex items-center justify-center w-16 h-16 rounded-full border-2 border-mint-green flex-shrink-0">
                  <span className="text-mint-green text-xl font-bold">30</span>
                  <span className="absolute -bottom-1 text-white/70 text-xs">Days</span>
                </div>
                <h3 className="text-2xl font-bold mt-2">No Results, No Fee</h3>
              </div>
              
              <p className="text-white/70 mb-8">
                If we don't deliver measurable improvements to your key metrics 
                within the first 30 days, you don't pay a cent. And you keep all 
                the strategy documents, customer insights, and optimization 
                plans we've created.
              </p>
              
              <div className="space-y-5">
                <div className="flex items-start gap-3">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green flex-shrink-0 mt-1">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                  <div>
                    <h4 className="font-semibold text-white">Minimum 20% improvement in primary KPI</h4>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green flex-shrink-0 mt-1">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                  <div>
                    <h4 className="font-semibold text-white">No long-term contracts—cancel anytime</h4>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green flex-shrink-0 mt-1">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                  <div>
                    <h4 className="font-semibold text-white">You own all deliverables and assets</h4>
                  </div>
                </div>
                
                <div className="flex items-start gap-3">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green flex-shrink-0 mt-1">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                  <div>
                    <h4 className="font-semibold text-white">Weekly metrics reports for full transparency</h4>
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
          
          {/* Right Card - CTA */}
          <motion.div variants={fadeUp} className="w-full lg:w-1/2">
            <div className="text-center mb-6">
              <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4">
              Ready to Scale Your E-com Business Profitably?
              </h2>
              <p className="text-white/80 text-lg">
              Limited spots available for this month. Secure your growth strategy session now.
              </p>
            </div>
            
            <motion.div 
              className="bg-white/10 backdrop-blur-sm p-8 rounded-2xl border border-white/10 shadow-glass"
              whileHover={{ 
                scale: 1.01,
                boxShadow: "0 20px 40px rgba(0,0,0,0.2)",
                transition: { duration: 0.3 }
              }}
            >
              <div className="space-y-5 mb-8">
                <div className="flex items-center gap-4 bg-white/5 rounded-lg p-4">
                  <div className="w-12 h-12 rounded-full bg-iris-purple/20 flex items-center justify-center flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green">
                      <circle cx="12" cy="12" r="10"></circle>
                      <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                  </div>
                  <div>
                    <h4 className="font-bold text-white text-lg">30-Minute Discovery Call</h4>
                    <p className="text-white/70 text-sm">
                      Free, no-obligation strategy session
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center gap-4 bg-white/5 rounded-lg p-4">
                  <div className="w-12 h-12 rounded-full bg-iris-purple/20 flex items-center justify-center flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green">
                      <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 className="font-bold text-white text-lg">Only {spotsLeft} Spots Left</h4>
                    <p className="text-white/70 text-sm">
                      We limit new clients to ensure quality
                    </p>
                  </div>
                </div>
              </div>
              
              <button 
                onClick={openLeadForm}
                className="w-full py-4 bg-gradient-to-r from-iris-purple to-mint-green text-white font-semibold rounded-lg hover:opacity-95 transition-all duration-300"
              >
                Book a Free Discovery Call
              </button>
              
              <p className="mt-4 text-white/60 text-sm text-center">
                {isFormSubmitted ? "Check your email for confirmation details" : "We typically respond within one business day"}
              </p>
            </motion.div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

export default FinalCTA;

================
File: app/components/ui/button/index.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "../../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-3xl text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        // Zentric brand buttons
        primary: "bg-gradient-primary text-white hover:scale-[1.04]",
        secondaryBrand: "bg-transparent border border-iris-purple text-iris-purple hover:bg-iris-purple/5",
        tertiary: "text-onyx hover:text-deep-navy"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
        // Zentric brand sizes
        brand: "h-12 px-8 py-4 font-semibold",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: app/components/ui/examples/ButtonExample.tsx
================
"use client";

import { Button } from "../button";

export function ButtonExample() {
  return (
    <div className="flex flex-col space-y-8 p-8 max-w-4xl mx-auto">
      <div className="space-y-2">
        <h2 className="text-h2">Shadcn Button Examples</h2>
        <p className="text-base text-muted-foreground">
          Examples of button components using Zentric branding with Shadcn UI
        </p>
      </div>
      
      <div className="flex flex-col gap-8">
        <div className="space-y-4">
          <h3 className="text-h3">Zentric Brand Buttons</h3>
          <div className="flex flex-wrap gap-4">
            <Button variant="primary" size="brand">
              Primary Brand Button
            </Button>
            <Button variant="secondaryBrand" size="brand">
              Secondary Brand Button
            </Button>
            <Button variant="tertiary">
              Tertiary Link
            </Button>
          </div>
        </div>
        
        <div className="space-y-4">
          <h3 className="text-h3">Default Shadcn Buttons</h3>
          <div className="flex flex-wrap gap-4">
            <Button variant="default">Default</Button>
            <Button variant="secondary">Secondary</Button>
            <Button variant="outline">Outline</Button>
            <Button variant="ghost">Ghost</Button>
            <Button variant="link">Link</Button>
            <Button variant="destructive">Destructive</Button>
          </div>
        </div>
        
        <div className="space-y-4">
          <h3 className="text-h3">Size Variants</h3>
          <div className="flex flex-wrap gap-4 items-center">
            <Button size="sm">Small</Button>
            <Button size="default">Default</Button>
            <Button size="lg">Large</Button>
            <Button size="icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-plus">
                <path d="M5 12h14" />
                <path d="M12 5v14" />
              </svg>
            </Button>
            <Button size="brand" variant="primary">Brand Size</Button>
          </div>
        </div>
        
        <div className="space-y-4">
          <h3 className="text-h3">States</h3>
          <div className="flex flex-wrap gap-4">
            <Button>Default</Button>
            <Button disabled>Disabled</Button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/components/ui/CtaButton.tsx
================
'use client';

import { motion } from 'framer-motion';

interface CtaButtonProps {
  text: string;
  onClick: () => void;
  isSecondary?: boolean;
  compact?: boolean;
  className?: string;
}

const CtaButton = ({ 
  text, 
  onClick, 
  isSecondary = false, 
  compact = false,
  className = ''
}: CtaButtonProps) => {
  const btnClass = isSecondary 
    ? 'btn-secondary' 
    : 'btn-primary';
  
  const sizeClass = compact 
    ? 'py-2 px-4 text-sm' 
    : 'py-4 px-8 text-base';

  return (
    <motion.button
      whileHover={{ scale: isSecondary ? 1.02 : 1.04 }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.12, ease: 'easeOut' }}
      className={`${btnClass} ${sizeClass} ${className}`}
      onClick={onClick}
    >
      {text}
    </motion.button>
  );
};

export default CtaButton;

================
File: app/lib/db/migrations/schema.sql
================
-- Create lead_submissions table if it doesn't exist
CREATE TABLE IF NOT EXISTS lead_submissions (
  id VARCHAR(128) PRIMARY KEY,
  email VARCHAR(255) NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'partial',
  revenue VARCHAR(50),
  budget VARCHAR(50),
  website VARCHAR(255),
  "firstName" VARCHAR(100),
  "lastName" VARCHAR(100),
  phone VARCHAR(50),
  "referralSource" VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
  reminders_count VARCHAR DEFAULT '0',
  last_reminder_at TIMESTAMP WITH TIME ZONE,
  completed_at TIMESTAMP WITH TIME ZONE,
  ip_address VARCHAR(50),
  user_agent TEXT
);

================
File: app/lib/db/schema.ts
================
import { pgTable, varchar, timestamp, text } from "drizzle-orm/pg-core";
import { createId } from "@paralleldrive/cuid2";

// Lead form submissions table schema
export const leadSubmissions = pgTable("lead_submissions", {
  id: varchar("id", { length: 128 }).primaryKey().$defaultFn(() => createId()),
  email: varchar("email", { length: 255 }).notNull(),
  status: varchar("status", { length: 20 }).notNull().default("partial"), // 'partial' or 'complete'
  revenue: varchar("revenue", { length: 50 }),
  budget: varchar("budget", { length: 50 }),
  website: varchar("website", { length: 255 }),
  firstName: varchar("firstName", { length: 100 }),
  lastName: varchar("lastName", { length: 100 }),
  phone: varchar("phone", { length: 50 }),
  referralSource: varchar("referralSource", { length: 100 }),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  remindersCount: varchar("reminders_count").default("0"),
  lastReminderAt: timestamp("last_reminder_at"),
  completedAt: timestamp("completed_at"),
  ipAddress: varchar("ip_address", { length: 50 }),
  userAgent: text("user_agent"),
});

// Type definitions for easier usage
export type LeadSubmission = typeof leadSubmissions.$inferSelect;
export type NewLeadSubmission = typeof leadSubmissions.$inferInsert;

================
File: app/lib/rate-limit.ts
================
import { Redis } from "@upstash/redis";
import { Ratelimit } from "@upstash/ratelimit";
import { NextRequest } from "next/server";

// Create a simple in-memory rate limiter for development
const ipRequests: Record<string, { count: number, timestamp: number }> = {};
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute in milliseconds
const RATE_LIMIT_MAX = 5; // 5 requests per minute

// Check if Upstash Redis credentials are available
const hasUpstashCredentials = 
  process.env.UPSTASH_REDIS_REST_URL && 
  process.env.UPSTASH_REDIS_REST_TOKEN &&
  !process.env.UPSTASH_REDIS_REST_URL.includes('your-region');

// Create Redis client only if credentials are properly configured
const redis = hasUpstashCredentials 
  ? Redis.fromEnv()
  : null;

// Create a rate limiter using Upstash Redis if available, otherwise use in-memory
export const ratelimit = redis
  ? new Ratelimit({
      redis,
      limiter: Ratelimit.slidingWindow(5, "1 m"),
      analytics: true,
    })
  : {
      limit: async (key: string) => {
        const now = Date.now();
        const ip = key.split('_')[2] || key;
        
        // Initialize or reset expired record
        if (!ipRequests[ip] || (now - ipRequests[ip].timestamp) > RATE_LIMIT_WINDOW) {
          ipRequests[ip] = { count: 0, timestamp: now };
        }
        
        // Increment request count
        ipRequests[ip].count++;
        
        // Check if over limit
        const remaining = Math.max(0, RATE_LIMIT_MAX - ipRequests[ip].count);
        const success = ipRequests[ip].count <= RATE_LIMIT_MAX;
        
        return {
          success,
          limit: RATE_LIMIT_MAX,
          remaining,
          reset: ipRequests[ip].timestamp + RATE_LIMIT_WINDOW,
        };
      }
    };

// Helper function to get client IP from request
export function getClientIp(request: NextRequest): string {
  // Try to get the IP from X-Forwarded-For header (used by Vercel)
  const xForwardedFor = request.headers.get("x-forwarded-for");
  if (xForwardedFor) {
    return xForwardedFor.split(",")[0].trim();
  }

  // Fallback to other headers
  const xRealIp = request.headers.get("x-real-ip");
  if (xRealIp) {
    return xRealIp;
  }

  // Final fallback
  return "127.0.0.1"; // localhost as fallback
}

================
File: app/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

/**
 * Combines multiple className values using clsx and merges the resulting Tailwind classes with twMerge
 * to prevent class conflicts and ensure proper specificity
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: app/shadcn-components/page.tsx
================
import { ButtonExample } from "../components/ui/examples/ButtonExample";

export default function ShadcnComponentsPage() {
  return (
    <div className="container mx-auto py-12">
      <div className="mb-12 space-y-4">
        <h1 className="text-hero">Shadcn Component Gallery</h1>
        <p className="text-xl">
          A showcase of available Shadcn UI components customized for Zentric Digital branding
        </p>
      </div>

      <div className="border rounded-lg p-6 mb-12">
        <ButtonExample />
      </div>

      {/* Additional components will be added here as they are created */}
      <div className="mt-12 border-t pt-8">
        <h2 className="text-h2">Usage Guide</h2>
        <p className="mt-4">
          For detailed instructions on how to use and customize these components, please refer to the{" "}
          <a 
            href="https://github.com/your-org/zentric-digital/blob/main/shadcn-usage-guide.md" 
            className="text-iris-purple hover:underline"
          >
            Shadcn Usage Guide
          </a>
          .
        </p>
      </div>
    </div>
  );
}

================
File: app/api/leads/capture-email/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { getDb } from "@/app/lib/db";
import { leadSubmissions } from "@/app/lib/db/schema";
import { eq } from "drizzle-orm";
import { ratelimit, getClientIp } from "@/app/lib/rate-limit";

// Email validation schema
const EmailSchema = z.object({
  email: z.string().email({ message: "Invalid email address" }),
});

export async function POST(request: NextRequest) {
  try {
    const db = getDb();
    // Apply rate limiting
    const ip = getClientIp(request);
    const { success, limit, reset, remaining } = await ratelimit.limit(`leads_ip_${ip}`);
    
    if (!success) {
      return NextResponse.json(
        { error: "Too many requests. Please try again later." },
        { status: 429, headers: { 'X-RateLimit-Limit': limit.toString(), 'X-RateLimit-Remaining': remaining.toString(), 'X-RateLimit-Reset': reset.toString() } }
      );
    }

    // Parse request body
    const body = await request.json();
    
    // Validate email using Zod
    const result = EmailSchema.safeParse(body);
    if (!result.success) {
      return NextResponse.json({ error: "Invalid email address" }, { status: 400 });
    }
    
    // Extract validated email
    const { email } = result.data;
    
    // Get user agent for tracking
    const userAgent = request.headers.get("user-agent") || "";
    
    try {
      // Check if this email already exists
      const existingSubmission = await db.query.leadSubmissions.findFirst({
        where: eq(leadSubmissions.email, email)
      });
      
      let submissionId;
      
      if (existingSubmission) {
        // Update existing record
        submissionId = existingSubmission.id;
        await db
          .update(leadSubmissions)
          .set({ updatedAt: new Date() })
          .where(eq(leadSubmissions.id, submissionId));
      } else {
        // Create new record
        const [newSubmission] = await db
          .insert(leadSubmissions)
          .values({
            email,
            status: "partial",
            ipAddress: ip,
            userAgent
          })
          .returning({ id: leadSubmissions.id });
        
        submissionId = newSubmission.id;
      }
      
      // Return success response with submission ID
      return NextResponse.json({ 
        success: true, 
        message: "Email captured successfully", 
        submissionId 
      });
    } catch (dbError) {
      console.error("Database error:", dbError);
      
      // For development, return detailed error
      if (process.env.NODE_ENV === 'development') {
        return NextResponse.json({ 
          error: "Database error", 
          details: dbError instanceof Error ? dbError.message : String(dbError)
        }, { status: 500 });
      }
      
      return NextResponse.json({ error: "Failed to save your information" }, { status: 500 });
    }
  } catch (error) {
    console.error("Error processing form submission:", error);
    
    // For development, return detailed error
    if (process.env.NODE_ENV === 'development') {
      return NextResponse.json({ 
        error: "Failed to process your request", 
        details: error instanceof Error ? error.message : String(error)
      }, { status: 500 });
    }
    
    return NextResponse.json(
      { error: "Failed to process your request" },
      { status: 500 }
    );
  }
}

================
File: app/components/sections/Comparison.tsx
================
'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { useLeadForm } from '../../contexts/LeadFormContext';

// Define a simple SolutionSection component right here to avoid import issues
const SimpleSolutionSection = () => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  return (
    <section id="solution" className="min-h-screen py-20 bg-onyx text-white relative scroll-mt-24 overflow-hidden flex items-center">
      <div className="absolute inset-0 bg-gradient-to-br from-iris-purple/20 to-deep-navy z-0"></div>
      
      <div ref={ref} className="container mx-auto px-6 md:px-12 relative z-10 max-w-7xl">
        <motion.div
          initial="hidden"
          animate="visible"
          transition={{ staggerChildren: 0.2 }}
          className="space-y-16"
        >
          <motion.div variants={fadeUp} className="text-center">
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-white">
              The Zentric Growth Engine
            </h2>
            <p className="text-xl text-white max-w-4xl mx-auto">
              A complete system to drive predictable revenue growth with a guaranteed
              <span className="font-bold bg-mint-green text-onyx px-2 py-0.5 rounded mx-1 inline-block">
                3x blended ROAS
              </span> 
              in 90 days or you don't pay.
            </p>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

const Comparison = () => {
  const { openLeadForm } = useLeadForm();
  const [ref, inView] = useInView({
    triggerOnce: false,
    threshold: 0.1,
  });

  // State for animations
  const [activeIndex, setActiveIndex] = useState<number | null>(null);

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  // Checkmark animation
  const checkmarkAnimation = {
    initial: { scale: 1, opacity: 0.7 },
    animate: { 
      scale: [1, 1.3, 1],
      opacity: 1,
      transition: { 
        duration: 0.5,
        times: [0, 0.5, 1],
        ease: "easeInOut"
      }
    }
  };

  // Row slide animation
  const rightSlideAnimation = {
    hidden: { opacity: 0, x: -20 },
    visible: { 
      opacity: 1, 
      x: 0,
      transition: { duration: 0.5 }
    }
  };
  
  const leftSlideAnimation = {
    hidden: { opacity: 0, x: 20 },
    visible: { 
      opacity: 1, 
      x: 0,
      transition: { duration: 0.5 }
    }
  };

  // Structure the comparison points with main text and highlight parts
  const comparisonPoints = [
    {
      traditional: "12-month binding contracts",
      zentric: {
        main: "No lock-in contracts ",
        highlight: "- leave after 90 days"
      }
    },
    {
      traditional: "Siloed teams (creative, ads, email)",
      zentric: {
        main: "Founder-level strategists ",
        highlight: "+ AI creative engine"
      }
    },
    {
      traditional: "Account manager as primary contact point",
      zentric: {
        main: "Text the founders directly ",
        highlight: "- weekly strategy calls"
      }
    },
    {
      traditional: "20% commission on ad spend + monthly fees",
      zentric: {
        main: "100% transparent rev-share pricing ",
        highlight: "- we profit when you profit"
      }
    },
    {
      traditional: "+€8K+ monthly retainer regardless of results",
      zentric: {
        main: "Pay for results only ",
        highlight: "- no retainer after month 2 if targets unmet"
      }
    }
  ];

  return (
    <>
    {/* Challenge Section */}
    <section id="challenge" className="py-20 bg-deep-navy text-white relative scroll-mt-24 overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 bg-[url('/images/grid-pattern.svg')] opacity-5 z-0"></div>
      
      {/* Animated gradient accent */}
      <motion.div 
        className="absolute top-0 right-0 w-1/3 h-40 bg-gradient-to-r from-iris-purple/30 to-mint-green/30 blur-3xl rounded-full"
        animate={{
          x: [50, 0, 50],
          y: [0, 30, 0],
          opacity: [0.4, 0.6, 0.4],
        }}
        transition={{
          duration: 15,
          repeat: Infinity,
          repeatType: "reverse"
        }}
      />
      
      <div ref={ref} className="container mx-auto px-4 sm:px-6 md:px-12 relative z-10 max-w-7xl">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          transition={{ staggerChildren: 0.2 }}
          className="space-y-16"
        >
          {/* Headline and Subheadline */}
          <motion.div variants={fadeUp} className="text-center">
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-white">
            Stop Paying Agencies to Burn Your Budget
            </h2>
            <motion.p 
              className="text-xl text-white/80 max-w-4xl mx-auto"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3, duration: 0.5 }}
            >
              Our revenue depends on yours. We make money when you make money. Period.
            </motion.p>
          </motion.div>

          {/* Comparison Table - New Mobile-Friendly Design */}
          <motion.div 
            variants={fadeUp} 
            className="overflow-hidden rounded-2xl shadow-lg bg-deep-navy/50 backdrop-blur-sm border border-white/10"
          >
            {/* Table Headers - Visible on desktop, hidden on smallest screens */}
            <div className="hidden sm:grid grid-cols-2">
              <div className="bg-white/10 p-6 border-b border-white/10">
                <h3 className="text-xl font-bold text-white/80">Traditional Agency</h3>
              </div>
              <motion.div 
                className="bg-iris-purple p-6 border-b border-iris-purple/30"
                initial={{ backgroundColor: "rgba(99, 91, 255, 0.4)" }}
                animate={{ 
                  backgroundColor: ["rgba(99, 91, 255, 0.4)", "rgba(99, 91, 255, 0.6)", "rgba(99, 91, 255, 0.4)"]
                }}
                transition={{ duration: 3, repeat: Infinity }}
              >
                <h3 className="text-xl font-bold">Zentric Growth Engine</h3>
              </motion.div>
            </div>
            
            {/* Mobile Header - Visible only on smallest screens */}
            <div className="sm:hidden flex">
              <div className="w-1/2 bg-white/10 py-4 px-3 border-b border-white/10 flex items-center justify-center">
                <h3 className="text-base font-bold text-white/80 text-center">Traditional Agency</h3>
              </div>
              <motion.div 
                className="w-1/2 bg-iris-purple py-4 px-3 border-b border-iris-purple/30 flex items-center justify-center"
                initial={{ backgroundColor: "rgba(99, 91, 255, 0.4)" }}
                animate={{ 
                  backgroundColor: ["rgba(99, 91, 255, 0.4)", "rgba(99, 91, 255, 0.6)", "rgba(99, 91, 255, 0.4)"]
                }}
                transition={{ duration: 3, repeat: Infinity }}
              >
                <h3 className="text-base font-bold text-center">Zentric Growth</h3>
              </motion.div>
            </div>
            
            {/* Comparison Rows - Optimized for both mobile and desktop */}
            {comparisonPoints.map((point, index) => (
              <div key={index} className="grid grid-cols-2 relative">
                {/* Traditional Agency Column */}
                <motion.div 
                  className={`px-3 py-4 sm:p-6 ${index % 2 === 0 ? 'bg-white/5' : 'bg-transparent'} transition-all duration-300 opacity-60 relative`}
                  variants={rightSlideAnimation}
                  onMouseEnter={() => setActiveIndex(index)}
                  onMouseLeave={() => setActiveIndex(null)}
                  animate={activeIndex === index ? { opacity: 0.3 } : { opacity: 0.6 }}
                >
                  <div className="flex items-start gap-2 sm:gap-3">
                    <div className="min-w-5 w-5 h-5 rounded-full bg-red-500/20 flex items-center justify-center mt-0.5 shadow-sm">
                      <span className="text-xs font-bold text-red-500">✕</span>
                    </div>
                    <span className="text-sm sm:text-base text-white/80">{point.traditional}</span>
                  </div>
                </motion.div>
                
                {/* Zentric Column */}
                <motion.div 
                  className={`px-3 py-4 sm:p-6 ${index % 2 === 0 ? 'bg-iris-purple/10' : 'bg-iris-purple/5'} transition-all duration-300 relative`}
                  variants={leftSlideAnimation}
                  onMouseEnter={() => setActiveIndex(index)}
                  onMouseLeave={() => setActiveIndex(null)}
                  whileHover={{ 
                    backgroundColor: "rgba(99, 91, 255, 0.2)",
                    transition: { duration: 0.2 }
                  }}
                >
                  {/* Highlight effect on hover */}
                  <AnimatePresence>
                    {activeIndex === index && (
                      <motion.div 
                        className="absolute inset-0 bg-gradient-to-r from-iris-purple/10 to-mint-green/10"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.3 }}
                      />
                    )}
                  </AnimatePresence>
                  
                  <div className="flex items-start gap-2 sm:gap-3 relative z-10">
                    <motion.div 
                      className="min-w-5 w-5 h-5 rounded-full bg-mint-green/20 flex items-center justify-center mt-0.5 shadow-sm"
                      variants={checkmarkAnimation}
                      initial="initial"
                      animate={activeIndex === index ? "animate" : "initial"}
                    >
                      <span className="text-xs font-bold text-mint-green">✓</span>
                    </motion.div>
                    <span className="flex flex-col sm:flex-row">
                      <motion.span 
                        className="bg-clip-text text-transparent bg-gradient-to-br from-iris-purple to-mint-green font-medium text-sm sm:text-base"
                        initial={{ opacity: 0.9 }}
                        animate={activeIndex === index ? 
                          { opacity: 1, scale: 1.02 } : 
                          { opacity: 0.9, scale: 1 }
                        }
                        transition={{ duration: 0.3 }}
                      >
                        {point.zentric.main}
                      </motion.span>
                      <span className="text-sm sm:text-base text-white">
                        <span className="inline-block">&nbsp;{point.zentric.highlight}</span>
                      </span>
                    </span>
                  </div>
                </motion.div>
                
                {/* Mobile separator line */}
                {index < comparisonPoints.length - 1 && (
                  <div className="col-span-2 h-px bg-white/10 sm:hidden"></div>
                )}
              </div>
            ))}

            {/* Mobile CTA to open lead form */}
            <div 
              onClick={openLeadForm}
              className="sm:hidden p-4 bg-gradient-to-r from-iris-purple/20 to-mint-green/20 text-center cursor-pointer hover:from-iris-purple/30 hover:to-mint-green/30 transition-all duration-300"
            >
              <div className="w-full py-3 px-4 text-white font-medium text-sm">
                Book a Free Discovery Call
              </div>
            </div>
            
            {/* Desktop CTA to open lead form */}
            <div 
              onClick={openLeadForm}
              className="hidden sm:block p-5 bg-gradient-to-r from-iris-purple/20 to-mint-green/20 text-center border-t border-white/10 cursor-pointer hover:from-iris-purple/30 hover:to-mint-green/30 transition-all duration-300"
            >
              <div className="px-8 py-4 text-white font-medium">
                Book a Free Discovery Call
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>

    {/* Render the SimpleSolutionSection to ensure it's part of the page */}
    {/* <SimpleSolutionSection /> */}
    </>
  );
};

export default Comparison;

// reasoning: This section follows the Problem-Agitation-Solution copywriting framework.
// It establishes clear pain points, agitates them by contrasting with typical agency behavior,
// then presents Zentric's solution. The contrast box with specific metrics (3× ROAS)
// provides quantifiable proof, building credibility and desire.

================
File: app/components/sections/Guarantees.tsx
================
'use client';

import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';

const Guarantees = () => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  return (
    <section className="py-12 bg-nordic-ivory text-onyx relative overflow-hidden" id="guarantees">
      <div ref={ref} className="container mx-auto px-6 md:px-12 relative z-10 max-w-6xl">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          transition={{ staggerChildren: 0.1 }}
        >
          <motion.div variants={fadeUp}>
            <h3 className="text-2xl font-bold text-deep-navy mb-6 text-center">Our Guarantees</h3>
            
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Guarantee 1 */}
              <div className="bg-white shadow-sm rounded-xl p-4">
                <h4 className="font-bold text-iris-purple">Creative Blast SLA</h4>
                <p className="text-sm text-deep-navy/80 mt-1">Testing ad set live within 48 hours</p>
              </div>
              
              {/* Guarantee 2 */}
              <div className="bg-white shadow-sm rounded-xl p-4">
                <h4 className="font-bold text-iris-purple">3× ROAS Pledge</h4>
                <p className="text-sm text-deep-navy/80 mt-1">Or we work free until target is achieved</p>
              </div>
              
              {/* Guarantee 3 */}
              <div className="bg-white shadow-sm rounded-xl p-4">
                <h4 className="font-bold text-iris-purple">No-Lock-In Exit</h4>
                <p className="text-sm text-deep-navy/80 mt-1">Leave with 15-day notice after 90 days</p>
              </div>
              
              {/* Guarantee 4 */}
              <div className="bg-white shadow-sm rounded-xl p-4">
                <h4 className="font-bold text-iris-purple">Zero-Spend Mark-Up</h4>
                <p className="text-sm text-deep-navy/80 mt-1">We never skim ad budget, guaranteed</p>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

export default Guarantees;

================
File: app/components/sections/ProcessTimeline.tsx
================
'use client';

import { motion, useScroll, useTransform } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { useRef } from 'react';

const ProcessTimeline = () => {
  const containerRef = useRef(null);
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start end", "end start"]
  });

  const [ref, inView] = useInView({
    triggerOnce: false,
    threshold: 0.1,
  });

  const fadeUp = {
    hidden: { opacity: 0, y: 30 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.6,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  const lineVariants = {
    hidden: { height: 0 },
    visible: { 
      height: '100%', 
      transition: { 
        duration: 1.5, 
        ease: "easeInOut" 
      } 
    }
  };

  const steps = [
    {
      number: "01",
      title: "Discovery Call",
      description: "Fit check & content inventory (30 min).",
      duration: "Day 1"
    },
    {
      number: "02",
      title: "Planning & Strategy Sprint",
      description: "Internal build → one feedback call.",
      duration: "Days 2-3"
    },
    {
      number: "03",
      title: "Proposal",
      description: "Pricing tier, bonuses, guarantees; same-day e-sign.",
      duration: "Day 4"
    },
    {
      number: "04",
      title: "Kick-Off",
      description: "Access, pixels, creative brief locked.",
      duration: "Day 0"
    },
    {
      number: "05",
      title: "Creative Blast",
      description: "First testing ad set (5 ads) live.",
      duration: "Day 2"
    },
    {
      number: "06",
      title: "Weekly Momentum Call",
      description: "Metrics review, next CRO lever, blockers.",
      duration: "Weekly"
    },
    {
      number: "07",
      title: "Quarterly Zentric Review",
      description: "Revenue deep-dive, tier re-assessment, 90-day roadmap.",
      duration: "Every 90 Days"
    }
  ];

  return (
    <section className="py-20 bg-deep-navy/95 relative overflow-hidden" ref={containerRef}>
      {/* Background elements */}
      <div className="absolute top-0 left-0 w-full h-full overflow-hidden">
        <div className="absolute top-10 left-10 w-60 h-60 rounded-full bg-iris-purple/10 blur-3xl"></div>
        <div className="absolute bottom-40 right-20 w-80 h-80 rounded-full bg-mint-green/5 blur-3xl"></div>
      </div>
      
      <div ref={ref} className="container mx-auto px-6 md:px-12 relative z-10 max-w-7xl">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          transition={{ staggerChildren: 0.2 }}
          className="space-y-16"
        >
          <motion.div variants={fadeUp} className="text-center max-w-3xl mx-auto">
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-6 text-white bg-gradient-to-r from-white to-mint-green/70 bg-clip-text text-transparent">
              Our Onboarding Process
            </h2>
            <p className="text-nordic-ivory/80 text-lg">
              We're built for speed and results. Here's how we transform your growth engine from day one.
            </p>
          </motion.div>

          {/* Vertical Timeline */}
          <div className="relative">
            {/* Vertical line with animation */}
            <motion.div 
              variants={lineVariants}
              initial="hidden"
              animate={inView ? "visible" : "hidden"}
              className="absolute top-0 left-0 md:left-1/2 h-full w-1 bg-gradient-to-b from-iris-purple via-iris-purple-light to-mint-green/70 z-0 transform md:-translate-x-1/2"
            ></motion.div>
            
            <div className="space-y-24 relative z-10">
              {steps.map((step, index) => {
                // Calculate animation delay based on index
                const delay = index * 0.15;
                
                return (
                <motion.div 
                  key={index} 
                  className="relative"
                  initial={{ opacity: 0, y: 50 }}
                  animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
                  transition={{ 
                    duration: 0.6, 
                    delay: delay,
                    ease: [0.16, 1, 0.3, 1]
                  }}
                >
                  <div className="flex flex-col md:flex-row items-start md:items-center gap-8">
                    {/* Left side (even) or right side (odd) */}
                    <div className={`md:w-1/2 ${index % 2 === 0 ? 'md:pr-16 md:text-right order-1' : 'md:pl-16 md:order-3'}`}>
                      <div className="bg-deep-navy/50 backdrop-blur-sm p-8 rounded-xl border border-iris-purple/20 shadow-lg hover:shadow-iris-purple/10 transition-all duration-300 hover:-translate-y-1">
                        <div className="kpi-text bg-gradient-to-r from-iris-purple to-iris-purple-light bg-clip-text text-transparent mb-2">{step.number}</div>
                        <h3 className="text-xl font-bold mb-3 text-white">{step.title}</h3>
                        <p className="text-nordic-ivory/70 mb-4">{step.description}</p>
                        <div className="text-sm font-medium text-mint-green/80">{step.duration}</div>
                      </div>
                    </div>
                    
                    {/* Center circle with pulse animation */}
                    <div className="md:order-2 absolute md:absolute left-0 top-6 md:top-1/2 md:left-1/2 md:-translate-y-1/2 md:-translate-x-1/2 flex items-center justify-center">
                      <motion.div 
                        className="w-14 h-14 rounded-full bg-gradient-to-br from-iris-purple to-iris-purple-light flex items-center justify-center text-white font-bold z-10 shadow-lg shadow-iris-purple/30"
                        whileHover={{ scale: 1.1 }}
                        transition={{ type: "spring", stiffness: 400, damping: 10 }}
                      >
                        {index + 1}
                        <div className="absolute w-full h-full rounded-full bg-iris-purple/30 animate-ping opacity-75"></div>
                      </motion.div>
                    </div>
                    
                    {/* Empty space for alternating layout */}
                    <div className={`hidden md:block md:w-1/2 ${index % 2 === 0 ? 'md:order-3' : 'md:order-1'}`}></div>
                  </div>
                </motion.div>
              )})}
            </div>
          </div>

          {/* Results after implementation */}
          <motion.div 
            variants={fadeUp} 
            className="bg-gradient-to-r from-deep-navy to-iris-purple p-[1px] rounded-2xl overflow-hidden"
          >
            <div className="bg-deep-navy/80 backdrop-blur-lg p-8 rounded-xl">
              <div className="flex flex-col md:flex-row gap-8 items-center">
                <div className="flex-1">
                  <h3 className="text-2xl font-bold mb-6 text-white">Guaranteed Results</h3>
                  <ul className="space-y-5">
                    <li className="flex items-start gap-4">
                      <div className="w-6 h-6 rounded-full bg-mint-green/20 flex items-center justify-center mt-0.5">
                        <span className="text-xs text-mint-green">✓</span>
                      </div>
                      <span className="text-nordic-ivory/90">Creative Blast SLA: Testing ad set (5 ads) live within 48h</span>
                    </li>
                    <li className="flex items-start gap-4">
                      <div className="w-6 h-6 rounded-full bg-mint-green/20 flex items-center justify-center mt-0.5">
                        <span className="text-xs text-mint-green">✓</span>
                      </div>
                      <span className="text-nordic-ivory/90">3× ROAS Pledge: Minimum blended ROAS in 90 days</span>
                    </li>
                    <li className="flex items-start gap-4">
                      <div className="w-6 h-6 rounded-full bg-mint-green/20 flex items-center justify-center mt-0.5">
                        <span className="text-xs text-mint-green">✓</span>
                      </div>
                      <span className="text-nordic-ivory/90">No-Lock-In Exit: Leave with 15-day notice after initial 90 days</span>
                    </li>
                    <li className="flex items-start gap-4">
                      <div className="w-6 h-6 rounded-full bg-mint-green/20 flex items-center justify-center mt-0.5">
                        <span className="text-xs text-mint-green">✓</span>
                      </div>
                      <span className="text-nordic-ivory/90">Zero-Spend Mark-Up: We never skim ad budget</span>
                    </li>
                  </ul>
                </div>
                <div className="md:w-1/3 bg-deep-navy/60 border border-iris-purple/20 rounded-xl p-8 text-center shadow-lg transform hover:scale-105 transition-all duration-300">
                  <div className="text-xs text-nordic-ivory/60 uppercase tracking-wider mb-2">GUARANTEED OUTCOME</div>
                  <div className="text-6xl font-bold bg-gradient-to-r from-mint-green to-iris-purple-light bg-clip-text text-transparent mb-2">3×</div>
                  <div className="text-nordic-ivory/80">Minimum ROAS in 90 Days</div>
                </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

export default ProcessTimeline;

// reasoning: This section uses a timeline to visually demonstrate the process,
// which reduces perceived complexity and effort for the client. By breaking down
// the journey into four clear steps with specific timeframes, it makes the path
// to results feel more concrete and attainable. The "Results After 30 Days" box
// reinforces the speed and efficacy of the process.

================
File: app/lib/db/index.ts
================
import { neon, neonConfig } from '@neondatabase/serverless';
import { drizzle, NeonHttpDatabase } from 'drizzle-orm/neon-http';
import * as schema from './schema';

// Optional: Disable usage of WebSockets in environments that don't allow them
neonConfig.fetchConnectionCache = true;

let db: NeonHttpDatabase<typeof schema> | null = null;

export const getDb = () => {
  if (db) {
    return db;
  }

  const databaseUrl = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL;

  // Log connection status for debugging (only in development)
  if (process.env.NODE_ENV === 'development') {
    if (!databaseUrl) {
      console.warn('⚠️ No database URL found. Please set NEON_DATABASE_URL or DATABASE_URL in your .env.local file.');
    } else {
      console.log('✅ Database URL found. Connecting to PostgreSQL.');
    }
  }

  if (!databaseUrl) {
    throw new Error("Database URL is not defined in environment variables. Set NEON_DATABASE_URL or DATABASE_URL.");
  }
  
  const sql = neon(databaseUrl);
  
  db = drizzle(sql, { schema });
  
  return db;
};

// Export a type for the database client
export type DbClient = NeonHttpDatabase<typeof schema>;

================
File: app/providers.tsx
================
'use client';

import React from 'react';
import { LeadFormProvider } from './contexts/LeadFormContext';

export default function Providers({ children }: { children: React.ReactNode }) {
  return (
    <LeadFormProvider>
      {children}
    </LeadFormProvider>
  );
}

================
File: app/api/leads/complete/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { getDb } from "@/app/lib/db";
import { leadSubmissions } from "@/app/lib/db/schema";
import { eq } from "drizzle-orm";
import { ratelimit, getClientIp } from "@/app/lib/rate-limit";

// Form completion validation schema
const CompleteFormSchema = z.object({
  submissionId: z.string().min(1, { message: "Submission ID is required" }),
  email: z.string().email({ message: "Invalid email address" }),
  revenue: z.string().min(1, { message: "Monthly revenue is required" }),
  budget: z.string().min(1, { message: "Marketing budget is required" }),
  website: z.string().min(1, { message: "Website URL is required" }),
  firstName: z.string().min(1, { message: "First name is required" }),
  lastName: z.string().min(1, { message: "Last name is required" }),
  phone: z.string().optional(),
  referralSource: z.string().min(1, { message: "Referral source is required" }),
});

export async function POST(request: NextRequest) {
  try {
    const db = getDb();
    // Apply rate limiting
    const ip = getClientIp(request);
    const { success, limit, reset, remaining } = await ratelimit.limit(`leads_ip_${ip}`);
    
    if (!success) {
      return NextResponse.json(
        { error: "Too many requests. Please try again later." },
        { status: 429, headers: { 'X-RateLimit-Limit': limit.toString(), 'X-RateLimit-Remaining': remaining.toString(), 'X-RateLimit-Reset': reset.toString() } }
      );
    }

    // Parse request body
    const body = await request.json();
    
    // Validate form data using Zod
    const result = CompleteFormSchema.safeParse(body);
    if (!result.success) {
      const errors = result.error.flatten().fieldErrors;
      return NextResponse.json({ error: "Validation failed", details: errors }, { status: 400 });
    }
    
    // Extract validated data
    const { 
      submissionId, 
      email, 
      revenue, 
      budget, 
      website, 
      firstName, 
      lastName, 
      phone, 
      referralSource 
    } = result.data;
    
    // Check if the submission exists
    const existingSubmission = await db.query.leadSubmissions.findFirst({
      where: eq(leadSubmissions.id, submissionId)
    });
    
    if (!existingSubmission) {
      return NextResponse.json({ error: "Submission not found" }, { status: 404 });
    }
    
    // Verify that the email matches what was initially captured
    if (existingSubmission.email !== email) {
      return NextResponse.json({ error: "Email mismatch" }, { status: 400 });
    }
    
    // Update the submission with all form data
    await db
      .update(leadSubmissions)
      .set({
        revenue,
        budget,
        website,
        firstName,
        lastName,
        phone,
        referralSource,
        status: "complete",
        completedAt: new Date(),
        updatedAt: new Date()
      })
      .where(eq(leadSubmissions.id, submissionId));
    
    // Return success response
    return NextResponse.json({ 
      success: true, 
      message: "Form submission completed successfully" 
    });
  } catch (error) {
    console.error("Error completing form submission:", error);
    return NextResponse.json(
      { error: "Failed to process your request" },
      { status: 500 }
    );
  }
}

================
File: app/cases/page.tsx
================
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import Footer from '../components/sections/Footer';
import Navigation from '../components/ui/Navigation';
import { useLeadForm } from '../contexts/LeadFormContext';

export default function Cases() {
  const [activeTab, setActiveTab] = useState('all');
  const [isGridView, setIsGridView] = useState(true);
  const { openLeadForm } = useLeadForm();

  const tabs = [
    { id: 'all', label: 'All Cases' },
    { id: 'ecommerce', label: 'E-commerce' },
    { id: 'saas', label: 'SaaS' },
    { id: 'subscription', label: 'Subscription' }
  ];

  const caseStudies = [
    {
      id: 1,
      title: 'FashionBrand: 324% ROAS Increase in 60 Days',
      category: 'ecommerce',
      metrics: [
        { label: 'ROAS Increase', value: '324%' },
        { label: 'CPA Reduction', value: '42%' },
        { label: 'Revenue Growth', value: '2.8x' }
      ],
      description: 'How we transformed an underperforming ad account into a high-ROAS machine for this fashion e-commerce brand.'
    },
    {
      id: 2,
      title: 'SaaS Platform: Customer Acquisition Cost Cut by 38%',
      category: 'saas',
      metrics: [
        { label: 'CAC Reduction', value: '38%' },
        { label: 'Demo Requests', value: '+156%' },
        { label: 'LTV:CAC Ratio', value: '4.2:1' }
      ],
      description: 'Strategic funnel optimization and targeted audience refinement for a B2B SaaS platform.'
    },
    {
      id: 3,
      title: 'Subscription Box: From $50K to $250K MRR in 90 Days',
      category: 'subscription',
      metrics: [
        { label: 'Revenue Growth', value: '5x' },
        { label: 'Retention Rate', value: '+28%' },
        { label: 'Acquisition Cost', value: '-32%' }
      ],
      description: 'Scaling a niche subscription box service with multi-channel acquisition and retention strategies.'
    },
    {
      id: 4,
      title: 'BeautyBrand: Scaling to 7-Figures with Meta Ads',
      category: 'ecommerce',
      metrics: [
        { label: 'Ad Spend', value: '$150K' },
        { label: 'Revenue', value: '$720K' },
        { label: 'ROAS', value: '4.8x' }
      ],
      description: 'How we helped a beauty brand break through the 7-figure revenue mark with optimized Meta advertising.'
    }
  ];

  const filteredCases = activeTab === 'all' 
    ? caseStudies 
    : caseStudies.filter(item => item.category === activeTab);

  return (
    <main className="bg-ivory-background min-h-screen">
      {/* Navigation Component */}
      <Navigation />

      {/* Main Content */}
      <div className="pt-32 pb-20 px-6 md:px-8 max-w-7xl mx-auto">
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-10">Case Studies</h1>
        
        {/* Filters and View Toggle */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-10 space-y-4 md:space-y-0">
          {/* Category Tabs */}
          <div className="flex flex-wrap gap-2">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                  activeTab === tab.id 
                    ? 'bg-iris-purple text-white' 
                    : 'bg-white hover:bg-iris-purple/10 text-deep-navy'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </div>
          
          {/* View Toggle */}
          <div className="bg-white rounded-full p-1 flex">
            <button
              onClick={() => setIsGridView(true)}
              className={`p-2 rounded-full ${
                isGridView ? 'bg-iris-purple text-white' : 'text-deep-navy'
              }`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zm10 0a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
              </svg>
            </button>
            <button
              onClick={() => setIsGridView(false)}
              className={`p-2 rounded-full ${
                !isGridView ? 'bg-iris-purple text-white' : 'text-deep-navy'
              }`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>
        
        {/* Case Studies Grid/List */}
        <div className={`grid ${isGridView ? 'grid-cols-1 md:grid-cols-2' : 'grid-cols-1'} gap-8`}>
          {filteredCases.map((caseStudy) => (
            <motion.div
              key={caseStudy.id}
              className="bg-white rounded-2xl overflow-hidden shadow-sm hover:shadow-md transition-all duration-300"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
            >
              <div className="p-6 md:p-8">
                <h3 className="text-xl md:text-2xl font-bold mb-4">{caseStudy.title}</h3>
                
                <div className="grid grid-cols-3 gap-4 mb-6">
                  {caseStudy.metrics.map((metric, index) => (
                    <div key={index} className="bg-nordic-ivory/50 p-3 rounded-lg text-center">
                      <div className="text-iris-purple font-bold text-xl md:text-2xl">{metric.value}</div>
                      <div className="text-xs md:text-sm text-onyx/70">{metric.label}</div>
                    </div>
                  ))}
                </div>
                
                <p className="text-onyx/80 mb-6">{caseStudy.description}</p>
                
                <button className="text-iris-purple font-medium flex items-center">
                  Read Case Study
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </motion.div>
          ))}
        </div>
        
        {/* CTA Section */}
        <div className="mt-16 bg-deep-navy text-white rounded-3xl p-8 md:p-12">
          <div className="max-w-3xl mx-auto text-center">
            <h2 className="text-2xl md:text-3xl font-semibold mb-6">Want Similar Results?</h2>
            <p className="text-xl text-white/80 mb-8">Book a discovery call to see how we can transform your marketing performance.</p>
            <button 
              onClick={openLeadForm}
              className="bg-iris-purple hover:bg-iris-purple-light text-white py-4 px-8 rounded-full font-semibold transition-colors duration-300"
            >
              Book Free Discovery Call
            </button>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  );
}

================
File: app/components/sections/SolutionSection.tsx
================
'use client';

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useInView } from 'react-intersection-observer';

const SolutionSection = () => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  // State for animations
  const [isGuaranteeHovered, setIsGuaranteeHovered] = useState(false);

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  // Pulse animation for CTA elements
  const pulseAnimation = {
    initial: { scale: 1 },
    pulse: {
      scale: [1, 1.03, 1],
      transition: {
        duration: 2,
        repeat: Infinity,
        repeatType: "reverse" as const,
        ease: "easeInOut"
      }
    }
  };

  return (
    <section id="solution" className="min-h-screen py-20 bg-onyx text-white relative scroll-mt-24 overflow-hidden flex items-center">
      {/* Background pattern */}
      <div className="absolute inset-0 bg-[url('/images/grid-pattern.svg')] opacity-5 z-0"></div>
      
      {/* Animated gradient accent */}
      <motion.div 
        className="absolute bottom-0 left-0 w-1/3 h-40 bg-gradient-to-r from-mint-green/30 to-iris-purple/30 blur-3xl rounded-full"
        animate={{
          x: [-50, 0, -50],
          y: [0, 30, 0],
          opacity: [0.4, 0.6, 0.4],
        }}
        transition={{
          duration: 15,
          repeat: Infinity,
          repeatType: "reverse"
        }}
      />
      
      <div ref={ref} className="container mx-auto px-6 md:px-12 relative z-10 max-w-7xl">
        <motion.div
          initial="hidden"
          animate="visible"
          transition={{ staggerChildren: 0.2 }}
          className="space-y-16"
        >
          {/* Solution Headline */}
          <motion.div variants={fadeUp} className="text-center">
            <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-white">
              The Zentric Growth Engine
            </h2>
            <p className="text-xl text-white max-w-4xl mx-auto">
            The growth engine that delivers: Increased traffic, streamlined funnels, better ads, higher ROAS.
            </p>
          </motion.div>
          
          {/* What You Get Section */}
          <motion.div variants={fadeUp} className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Meta Paid Advertising */}
            <motion.div 
              className="bg-deep-navy p-8 rounded-2xl border border-iris-purple/30 hover:bg-deep-navy/80 hover:border-iris-purple/50 transition-all duration-300"
              whileHover={{ 
                y: -5,
                boxShadow: "0 10px 25px rgba(99, 91, 255, 0.2)",
                transition: { duration: 0.3 }
              }}
            >
              <div className="w-12 h-12 rounded-full bg-iris-purple/40 flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white">
                  <path d="M12 20V10"></path>
                  <path d="M18 20V4"></path>
                  <path d="M6 20v-6"></path>
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">Meta Paid Advertising</h3>
              <p className="text-white/90">Strategic campaign management to maximize ROAS across Facebook, Instagram and more.</p>
            </motion.div>
            
            {/* CRO Optimization Sprints */}
            <motion.div 
              className="bg-deep-navy p-8 rounded-2xl border border-iris-purple/30 hover:bg-deep-navy/80 hover:border-iris-purple/50 transition-all duration-300"
              whileHover={{ 
                y: -5,
                boxShadow: "0 10px 25px rgba(99, 91, 255, 0.2)",
                transition: { duration: 0.3 }
              }}
            >
              <div className="w-12 h-12 rounded-full bg-iris-purple/40 flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white">
                  <path d="M3 3v18h18"></path>
                  <path d="m19 9-5 5-4-4-3 3"></path>
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">CRO Optimization Sprints</h3>
              <p className="text-white/90">On-site copy, layout and offer-sequencing tests to improve conversion rates throughout your funnel.</p>
            </motion.div>
            
            {/* AI-Powered Creative Engine */}
            <motion.div 
              className="bg-deep-navy p-8 rounded-2xl border border-iris-purple/30 hover:bg-deep-navy/80 hover:border-iris-purple/50 transition-all duration-300"
              whileHover={{ 
                y: -5,
                boxShadow: "0 10px 25px rgba(99, 91, 255, 0.2)",
                transition: { duration: 0.3 }
              }}
            >
              <div className="w-12 h-12 rounded-full bg-iris-purple/40 flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white">
                  <path d="M12 8V4H8"></path>
                  <rect width="16" height="12" x="4" y="8" rx="2"></rect>
                  <path d="M2 14h2"></path>
                  <path d="M20 14h2"></path>
                  <path d="M15 13v2"></path>
                  <path d="M9 13v2"></path>
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-3 text-white">AI-Powered Creative Engine</h3>
              <p className="text-white/90">Rapid ad variants in less than 48 hours, continuously tested and optimized for maximum performance.</p>
            </motion.div>
          </motion.div>
          
          {/* Key Advantage */}
          <motion.div 
            variants={fadeUp} 
            className="bg-deep-navy p-8 rounded-2xl border border-iris-purple/30 transition-all duration-300 hover:bg-deep-navy/80 hover:border-iris-purple/50 relative"
          >
            {/* Subtle animated gradient background */}
            <motion.div 
              className="absolute inset-0 bg-gradient-to-br from-iris-purple/10 to-mint-green/10 rounded-2xl opacity-0"
              animate={{ 
                opacity: [0, 0.5, 0],
                transition: { 
                  duration: 5, 
                  repeat: Infinity,
                  repeatType: "reverse" 
                }
              }}
            />
            
            <div className="flex flex-col md:flex-row gap-8 items-center relative z-10">
              <div className="flex-1">
                <h3 className="text-2xl font-bold mb-4 text-white">Your Key Advantage</h3>
                <p className="text-white mb-6">
                  With Zentric.digital, you're not just buying services—you're partnering with a team that's financially incentivized to maximize your success. If we don't lift your blended ROAS in 60 days, you stop paying until we do.
                </p>
                <motion.div 
                  className="flex items-center gap-4"
                  initial={{ opacity: 1, y: 0 }}
                >
                  <motion.div 
                    className="w-12 h-12 rounded-full bg-mint-green/20 flex items-center justify-center"
                    whileHover={{ scale: 1.1, backgroundColor: 'rgba(83, 221, 108, 0.3)' }}
                    transition={{ duration: 0.2 }}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-mint-green">
                      <path d="M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z"></path>
                    </svg>
                  </motion.div>
                  <div>
                    <div className="font-semibold text-white">Aligned Incentives</div>
                    <div className="text-white/80 text-sm">Pay for performance, not promises</div>
                  </div>
                </motion.div>
              </div>
              <motion.div 
                className="md:w-1/3 bg-iris-purple/40 rounded-xl p-6 text-center relative overflow-hidden shadow-lg border border-iris-purple/50"
                variants={pulseAnimation}
                initial="initial"
                animate="pulse"
                whileHover={{ 
                  scale: 1.05, 
                  boxShadow: "0 10px 25px rgba(99, 91, 255, 0.3)",
                  transition: { duration: 0.3 }
                }}
                onMouseEnter={() => setIsGuaranteeHovered(true)}
                onMouseLeave={() => setIsGuaranteeHovered(false)}
              >
                {/* Animated glow effect */}
                <motion.div 
                  className="absolute -inset-1 bg-gradient-to-r from-iris-purple/30 via-mint-green/30 to-iris-purple/30 blur-lg opacity-0"
                  animate={isGuaranteeHovered ? 
                    { 
                      opacity: 1,
                      x: [0, 100, 0],
                      transition: { 
                        opacity: { duration: 0.3 },
                        x: { duration: 3, repeat: Infinity, ease: "linear" }
                      }
                    } : 
                    { opacity: 0 }
                  }
                />
                
                <div className="relative z-10">
                  <div className="text-xs text-white uppercase tracking-wider mb-2 font-medium">MINIMUM ROAS GUARANTEE</div>
                  <motion.div 
                    className="text-5xl font-bold bg-mint-green text-onyx inline-block px-4 py-1 rounded mb-2"
                    animate={isGuaranteeHovered ? 
                      { 
                        scale: [1, 1.1, 1],
                        boxShadow: "0 0 20px rgba(83, 221, 108, 0.4)",
                        transition: { 
                          duration: 0.5, 
                          times: [0, 0.5, 1],
                          ease: "easeInOut" 
                        }
                      } : {}
                    }
                  >
                    3×
                  </motion.div>
                  <div className="text-white mt-2">In 90 days or you don't pay</div>
                  
                  <AnimatePresence>
                    {isGuaranteeHovered && (
                      <motion.div
                        className="mt-4 pt-4 border-t border-white/20"
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <motion.span 
                          className="text-sm text-white block"
                          initial={{ y: 10, opacity: 0 }}
                          animate={{ y: 0, opacity: 1 }}
                          transition={{ delay: 0.1 }}
                        >
                          No risk, all reward. Get started today.
                        </motion.span>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </motion.div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
};

export default SolutionSection;

================
File: app/components/ui/LeadForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { z } from 'zod';
import { Button } from './button';

// Define the form data structure
type FormData = {
  email: string;
  revenue: string;
  budget: string;
  website: string;
  firstName: string;
  lastName: string;
  phone: string;
  referralSource: string;
  otherReferralSource?: string;
  submissionId?: string; // Add submission ID for tracking the form
}

// Form validation schema using Zod
const emailSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address" })
});

const fullFormSchema = z.object({
  email: z.string().email({ message: "Please enter a valid email address" }),
  revenue: z.string().min(1, { message: "Please select your monthly revenue" }),
  budget: z.string().min(1, { message: "Please select your marketing budget" }),
  website: z.string().url({ message: "Please enter a valid website URL" }).or(z.string().min(1, { message: "Please enter your website URL" })),
  firstName: z.string().min(1, { message: "First name is required" }),
  lastName: z.string().min(1, { message: "Last name is required" }),
  phone: z.string().optional(),
  referralSource: z.string().min(1, { message: "Please select how you heard about us" }),
  otherReferralSource: z.string().optional(),
}).refine(data => {
    if (data.referralSource === 'Other') {
        return !!data.otherReferralSource && data.otherReferralSource.length > 0;
    }
    return true;
}, {
    message: "Please specify how you heard about us",
    path: ["otherReferralSource"],
});

type LeadFormProps = {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: FormData) => void;
}

// Steps in the form
type FormStep = 'email' | 'details' | 'thanks';

// Local storage key for form data
const FORM_STORAGE_KEY = 'zentric_lead_form_data';

// Loading spinner component
const LoadingSpinner = () => (
  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
  </svg>
);

const LeadForm = ({ isOpen, onClose, onSubmit }: LeadFormProps) => {
  const [step, setStep] = useState<FormStep>('email');
  const [formData, setFormData] = useState<FormData>({
    email: '',
    revenue: '',
    budget: '',
    website: '',
    firstName: '',
    lastName: '',
    phone: '',
    referralSource: '',
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [emailSubmitted, setEmailSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Load saved form data from localStorage when the component mounts
  useEffect(() => {
    try {
      const savedData = localStorage.getItem(FORM_STORAGE_KEY);
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setFormData(parsedData);
        
        // If we have a submission ID, it means the user already completed step 1
        if (parsedData.submissionId) {
          setEmailSubmitted(true);
          setStep('details');
        }
      }
    } catch (error) {
      console.error('Error loading saved form data:', error);
    }
  }, []);

  // Save form data to localStorage whenever it changes
  useEffect(() => {
    try {
      localStorage.setItem(FORM_STORAGE_KEY, JSON.stringify(formData));
    } catch (error) {
      console.error('Error saving form data:', error);
    }
  }, [formData]);

  // Reset form when closed
  useEffect(() => {
    if (!isOpen) {
      setTimeout(() => {
        setStep('email');
        setErrors({});
        setEmailSubmitted(false);
        setErrorMessage(null);
      }, 300);
    }
  }, [isOpen]);

  // Prevent body scroll when popup is open
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  const validateEmail = () => {
    try {
      emailSchema.parse({ email: formData.email });
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        // Convert the ZodError format to our format
        const formattedErrors: Record<string, string> = {};
        error.errors.forEach((err) => {
          if (err.path.length > 0) {
            const path = err.path.join('.');
            formattedErrors[path] = err.message;
          }
        });
        setErrors(formattedErrors);
      }
      return false;
    }
  };

  const validateFullForm = () => {
    try {
      fullFormSchema.parse(formData);
      return true;
    } catch (error) {
      if (error instanceof z.ZodError) {
        // Convert the ZodError format to our format
        const formattedErrors: Record<string, string> = {};
        error.errors.forEach((err) => {
          if (err.path.length > 0) {
            const path = err.path.join('.');
            formattedErrors[path] = err.message;
          }
        });
        setErrors(formattedErrors);
      }
      return false;
    }
  };

  const handleEmailStep = async () => {
    if (validateEmail()) {
      setIsSubmitting(true);
      setErrorMessage(null);
      
      try {
        // Call API to capture email
        const response = await fetch('/api/leads/capture-email', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: formData.email }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to submit email');
        }
        
        // Save the submission ID in the form data
        setFormData(prev => ({
          ...prev,
          submissionId: data.submissionId
        }));
        
        // Update UI state
        setEmailSubmitted(true);
        setStep('details');
        setErrors({});
      } catch (error) {
        console.error('Error submitting email:', error);
        setErrorMessage(error instanceof Error ? error.message : 'An unexpected error occurred');
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleSubmit = async () => {
    if (validateFullForm() && formData.submissionId) {
      setIsSubmitting(true);
      setErrorMessage(null);
      
      try {
        // Call API to complete the form submission
        const response = await fetch('/api/leads/complete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...formData,
            submissionId: formData.submissionId
          }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to submit form');
        }
        
        // Update UI state
        setStep('thanks');
        
        // Clear localStorage after successful submission
        localStorage.removeItem(FORM_STORAGE_KEY);
        
        // Small delay to show the thank you message before closing
        setTimeout(() => {
            const finalData = { ...formData };
            if (finalData.referralSource === 'Other') {
                finalData.referralSource = finalData.otherReferralSource || 'Other';
            }
            delete finalData.otherReferralSource;
            onSubmit(finalData);
        }, 1500);
      } catch (error) {
        console.error('Error submitting form:', error);
        setErrorMessage(error instanceof Error ? error.message : 'An unexpected error occurred');
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Clear the error for this field if it exists
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  // If not open, don't render anything
  if (!isOpen) return null;

  // Animation variants
  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 }
  };

  const popupVariants = {
    hidden: { opacity: 0, y: 20, scale: 0.95 },
    visible: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: { 
        duration: 0.3,
        ease: [0.16, 1, 0.3, 1]
      }
    },
    exit: { 
      opacity: 0, 
      y: 20, 
      scale: 0.95,
      transition: { 
        duration: 0.2
      }
    }
  };

  const contentVariants = {
    enter: { 
      x: 20, 
      opacity: 0 
    },
    center: { 
      x: 0, 
      opacity: 1,
      transition: { 
        duration: 0.3,
        ease: [0.16, 1, 0.3, 1]
      }
    },
    exit: { 
      x: -20, 
      opacity: 0,
      transition: { 
        duration: 0.2
      }
    }
  };

  // Render email step with loading indicator
  const renderEmailStep = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <h3 className="text-2xl font-semibold text-white">
          Get your free growth assessment
        </h3>
        <p className="text-white/70">
          Enter your email to get started. We'll send you personalized growth strategies based on your business details.
        </p>
      </div>
      <div className="space-y-2">
        <label htmlFor="email" className="text-sm font-medium text-white">
          Email address <span className="text-mint-green">*</span>
        </label>
        <input
          id="email"
          type="email"
          value={formData.email}
          onChange={(e) => handleInputChange('email', e.target.value)}
          placeholder="you@company.com"
          className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
          disabled={isSubmitting}
        />
        {errors.email && <p className="text-red-400 text-sm">{errors.email}</p>}
      </div>
      {errorMessage && <p className="text-red-400 text-sm">{errorMessage}</p>}
    </div>
  );
  
  const renderDetailsStep = () => (
    <div className="space-y-6">
      <div className="space-y-2">
        <h3 className="text-2xl font-semibold text-white">
          Help us understand your business
        </h3>
        <p className="text-white/70">
          We need these details to create a tailored growth strategy for your specific business needs.
        </p>
      </div>
      
      {/* Revenue Selection */}
      <div className="space-y-3">
        <label className="text-sm font-medium text-white">
          What is your brand's monthly revenue? <span className="text-mint-green">*</span>
        </label>
        <div className="grid grid-cols-2 gap-4">
          {['€0 – €25 k', '€25 k – €50 k', '€50 k – €150 k', '> €150 k'].map((option) => (
            <button
              key={option}
              type="button"
              onClick={() => handleInputChange('revenue', option)}
              className={`p-4 rounded-2xl text-left transition-all ${
                formData.revenue === option 
                  ? 'bg-iris-purple text-white' 
                  : 'bg-white/10 hover:bg-white/20 text-white/80'
              }`}
            >
              {option}
            </button>
          ))}
        </div>
        {errors.revenue && <p className="text-red-400 text-sm">{errors.revenue}</p>}
      </div>
      
      {/* Budget Selection */}
      <div className="space-y-3">
        <label className="text-sm font-medium text-white">
          What is your marketing budget? <span className="text-mint-green">*</span>
        </label>
        <div className="grid grid-cols-2 gap-4">
          {['€0 – €1 k', '€1 k – €2 k', '€2 k – €4 k', '> €4 k'].map((option) => (
            <button
              key={option}
              type="button"
              onClick={() => handleInputChange('budget', option)}
              className={`p-4 rounded-2xl text-left transition-all ${
                formData.budget === option 
                  ? 'bg-iris-purple text-white' 
                  : 'bg-white/10 hover:bg-white/20 text-white/80'
              }`}
            >
              {option}
            </button>
          ))}
        </div>
        {errors.budget && <p className="text-red-400 text-sm">{errors.budget}</p>}
      </div>
      
      {/* Website */}
      <div className="space-y-2">
        <label htmlFor="website" className="text-sm font-medium text-white">
          What's your website URL? <span className="text-mint-green">*</span>
        </label>
        <input
          id="website"
          type="text"
          value={formData.website}
          onChange={(e) => handleInputChange('website', e.target.value)}
          placeholder="https://yourbrand.com"
          className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
        />
        {errors.website && <p className="text-red-400 text-sm">{errors.website}</p>}
      </div>
      
      {/* Contact Information */}
      <div className="space-y-3">
        <label className="text-sm font-medium text-white">
          Your contact information <span className="text-mint-green">*</span>
        </label>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <input
              type="text"
              value={formData.firstName}
              onChange={(e) => handleInputChange('firstName', e.target.value)}
              placeholder="First name"
              className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
            />
            {errors.firstName && <p className="text-red-400 text-sm mt-1">{errors.firstName}</p>}
          </div>
          <div>
            <input
              type="text"
              value={formData.lastName}
              onChange={(e) => handleInputChange('lastName', e.target.value)}
              placeholder="Last name"
              className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
            />
            {errors.lastName && <p className="text-red-400 text-sm mt-1">{errors.lastName}</p>}
          </div>
        </div>
        <div>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => handleInputChange('phone', e.target.value)}
            placeholder="Phone number (Optional)"
            className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
          />
          {errors.phone && <p className="text-red-400 text-sm mt-1">{errors.phone}</p>}
        </div>
      </div>
      
      {/* Referral Source */}
      <div className="space-y-3">
        <label className="text-sm font-medium text-white">
          How did you hear about us? <span className="text-mint-green">*</span>
        </label>
        <div className="grid grid-cols-2 gap-4">
          {['LinkedIn', 'E-mail', 'Word of Mouth', 'Other'].map((option) => (
            <button
              key={option}
              type="button"
              onClick={() => handleInputChange('referralSource', option)}
              className={`p-4 rounded-2xl text-left transition-all ${
                formData.referralSource === option 
                  ? 'bg-iris-purple text-white' 
                  : 'bg-white/10 hover:bg-white/20 text-white/80'
              }`}
            >
              {option}
            </button>
          ))}
        </div>
        {formData.referralSource === 'Other' && (
            <div className="mt-4">
                <input
                    type="text"
                    value={formData.otherReferralSource || ''}
                    onChange={(e) => handleInputChange('otherReferralSource', e.target.value)}
                    placeholder="Please specify"
                    className="w-full p-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-iris-purple"
                />
                {errors.otherReferralSource && <p className="text-red-400 text-sm mt-1">{errors.otherReferralSource}</p>}
            </div>
        )}
        {errors.referralSource && <p className="text-red-400 text-sm">{errors.referralSource}</p>}
      </div>
    </div>
  );
  
  const renderThankYouStep = () => (
    <div className="space-y-6 text-center">
      <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-24 w-24 text-mint-green" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h3 className="text-2xl font-semibold text-white">Thank you for applying!</h3>
      <p className="text-white/80">We'll be in touch within 24 hours to schedule your discovery call.</p>
    </div>
  );

  const renderStep = () => {
    switch (step) {
      case 'email':
        return renderEmailStep();
      case 'details':
        return renderDetailsStep();
      case 'thanks':
        return renderThankYouStep();
      default:
        return null;
    }
  };

  const getProgressPercentage = () => {
    switch (step) {
      case 'email':
        return 33;
      case 'details':
        return 66;
      case 'thanks':
        return 100;
      default:
        return 0;
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <motion.div 
            className="fixed inset-0 bg-black/70 backdrop-blur-sm"
            variants={overlayVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            onClick={onClose}
          />
          
          <div className="flex items-center justify-center min-h-screen px-4 py-12">
            <motion.div 
              className="relative bg-deep-navy w-full max-w-2xl rounded-3xl border border-white/10 shadow-lg overflow-hidden"
              variants={popupVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Progress bar with time estimate */}
              {step !== 'thanks' && (
                <div className="relative pt-4 px-8">
                  <div className="flex justify-between text-xs text-white/60 mb-2">
                    <span>
                      {step === 'email' ? 'Step 1 of 2' : 'Step 2 of 2'}
                    </span>
                    <span>Takes less than 2 minutes</span>
                  </div>
                  <div className="h-2 bg-white/10 w-full rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-iris-purple transition-all duration-500 ease-out rounded-full"
                      style={{ width: `${getProgressPercentage()}%` }}
                    />
                  </div>
                </div>
              )}
              
              {/* Close button */}
              <button 
                onClick={onClose}
                className="absolute top-4 right-4 text-white/60 hover:text-white p-2 rounded-full transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
              
              {/* Content */}
              <div className="p-8">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={step}
                    variants={contentVariants}
                    initial="enter"
                    animate="center"
                    exit="exit"
                  >
                    {renderStep()}
                  </motion.div>
                </AnimatePresence>
              </div>
              
              {/* Navigation buttons */}
              {step !== 'thanks' && (
                <div className="p-6 bg-black/20 flex justify-between">
                  {step === 'email' ? (
                    <div /> // Empty div to maintain flex spacing
                  ) : (
                    <Button
                      variant="secondaryBrand"
                      onClick={() => setStep('email')}
                      disabled={isSubmitting}
                    >
                      Back
                    </Button>
                  )}
                  
                  <Button
                    variant="primary"
                    onClick={step === 'email' ? handleEmailStep : handleSubmit}
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <span className="flex items-center">
                        <LoadingSpinner />
                        {step === 'email' ? 'Processing...' : 'Submitting...'}
                      </span>
                    ) : (
                      step === 'email' ? 'Continue' : 'Submit for a Free Discovery Call'
                    )}
                  </Button>
                </div>
              )}
            </motion.div>
          </div>
        </div>
      )}
    </AnimatePresence>
  );
};

export default LeadForm;

================
File: app/how-we-work/page.tsx
================
'use client';

import Footer from '../components/sections/Footer';
import ProcessTimeline from '../components/sections/ProcessTimeline';
import Navigation from '../components/ui/Navigation';
import { useLeadForm } from '../contexts/LeadFormContext';

export default function HowWeWork() {
  const { openLeadForm } = useLeadForm();

  return (
    <main className="overflow-x-hidden bg-ivory-background">
      {/* Navigation Component */}
      <Navigation />

      {/* Main Content */}
      <div className="pt-32 pb-20 px-6 md:px-8 max-w-7xl mx-auto">
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-10">How We Work</h1>
        
        <div className="space-y-16">
          {/* Introduction Section */}
          <div className="bg-white rounded-3xl p-8 md:p-12 shadow-sm">
            <h2 className="text-2xl md:text-3xl font-semibold mb-8">Our Approach</h2>
            <p className="text-lg text-onyx/80 mb-4">At Zentric Digital, we follow a methodical approach designed to maximize your growth potential. Our process combines strategic planning, creative execution, and data-driven optimization to deliver measurable results.</p>
          </div>
          
          {/* Process Timeline Component */}
          <ProcessTimeline />
          
          {/* CTA Section */}
          <div className="bg-deep-navy text-white rounded-3xl p-8 md:p-12">
            <div className="max-w-3xl mx-auto text-center">
              <h2 className="text-2xl md:text-3xl font-semibold mb-6">Ready to Experience Our Process?</h2>
              <p className="text-xl text-white/80 mb-8">Schedule a discovery call to see how our proven approach can transform your business.</p>
              <button 
                onClick={openLeadForm}
                className="bg-iris-purple hover:bg-iris-purple-light text-white py-4 px-8 rounded-full font-semibold transition-colors duration-300"
              >
                Book Free Discovery Call
              </button>
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  );
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    scroll-behavior: smooth;
  }
  
  body {
    @apply bg-ivory-background text-onyx font-inter;
  }

  /* Glass effect utility */
  .glass {
    @apply backdrop-blur-md bg-white/5 border border-white/20 rounded-3xl shadow-glass;
  }
  
  /* Button styles based on brand guidelines */
  .btn-primary {
    @apply inline-flex items-center justify-center px-8 py-4 
           bg-gradient-primary text-white font-inter font-semibold
           rounded-3xl transition-transform duration-100 ease-out
           hover:scale-[1.04] focus:outline-none focus:ring-2 
           focus:ring-iris-purple focus:ring-opacity-50;
  }
  
  .btn-secondary {
    @apply inline-flex items-center justify-center px-8 py-4 
           bg-transparent border border-iris-purple text-iris-purple
           font-inter font-semibold rounded-3xl transition-all duration-100
           ease-out hover:bg-iris-purple/5 focus:outline-none
           focus:ring-2 focus:ring-iris-purple focus:ring-opacity-50;
  }
  
  .btn-tertiary {
    @apply inline-flex items-center justify-center font-inter font-medium
           text-onyx transition-colors duration-100 ease-out
           hover:text-deep-navy focus:outline-none;
  }
  
  /* Section spacing */
  section {
    @apply py-section;
  }
  
  /* Typography */
  h1 {
    @apply text-hero;
  }
  
  h2 {
    @apply text-h2;
  }
  
  h3 {
    @apply text-h3;
  }
  
  .kpi-text {
    @apply font-sf-mono text-kpi tracking-wider uppercase;
  }
  
  .micro-text {
    @apply text-micro tracking-wide uppercase;
  }
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

/* Custom animations */
@keyframes fadeUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeUp {
  animation: fadeUp 400ms cubic-bezier(0.16, 1, 0.3, 1) forwards;
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/about-us/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Link from 'next/link';
import Footer from '../components/sections/Footer';
import Navigation from '../components/ui/Navigation';
import Image from 'next/image';
import { useLeadForm } from '../contexts/LeadFormContext';

export default function AboutUs() {
  const { openLeadForm } = useLeadForm();

  return (
    <main className="overflow-x-hidden bg-ivory-background">
      {/* Navigation Component */}
      <Navigation />

      {/* Main Content */}
      <div className="pt-32 pb-20 px-6 md:px-8 max-w-7xl mx-auto">
        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-10">About Us</h1>
        
        <div className="space-y-16">
          {/* Mission Section */}
          <div className="bg-white rounded-3xl p-8 md:p-12 shadow-sm">
            <h2 className="text-2xl md:text-3xl font-semibold mb-8">Our Mission</h2>
            <p className="text-lg text-onyx/80 mb-6">We help e-commerce brands transform underperforming marketing funnels into high-ROAS profit machines. Our approach combines data-driven media buying with strategic funnel optimization to create sustainable, scalable growth systems.</p>
            <p className="text-lg text-onyx/80">At Zentric Digital, we believe in transparency, measurable results, and genuine partnership. We only win when you win, which is why we build performance guarantees into every client relationship.</p>
          </div>
          
          {/* Team Section */}
          <div className="bg-white rounded-3xl p-8 md:p-12 shadow-sm">
            <h2 className="text-2xl md:text-3xl font-semibold mb-8">Meet Our Team</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {/* Team Member 1 */}
              <div className="flex flex-col items-center text-center">
              <Image
                src="/images/sarah-chen.svg"
                alt="Photo of Sarah Chen"
                width={160}
                height={160}
                className="w-40 h-40 rounded-full mb-4 object-cover"
              />
                <h3 className="text-xl font-semibold mb-1">Sarah Chen</h3>
                <p className="text-iris-purple mb-3">Founder & CEO</p>
                <p className="text-onyx/70 text-sm">Ex-Facebook ads strategist with 7+ years experience scaling e-commerce brands from 6 to 8 figures.</p>
              </div>
              
              {/* Team Member 2 */}
              <div className="flex flex-col items-center text-center">
              <Image
                src="/images/marcus-johnson.svg"
                alt="Photo of Marcus Johnson"
                width={160}
                height={160}
                className="w-40 h-40 rounded-full mb-4 object-cover"
              />
                <h3 className="text-xl font-semibold mb-1">Marcus Johnson</h3>
                <p className="text-iris-purple mb-3">Head of Media Buying</p>
                <p className="text-onyx/70 text-sm">Managed $15M+ in ad spend with an average ROAS of 4.2x across diverse e-commerce verticals.</p>
              </div>
              
              {/* Team Member 3 */}
              <div className="flex flex-col items-center text-center">
              <Image
                src="/images/elena-rodriguez.svg"
                alt="Photo of Elena Rodriguez"
                width={160}
                height={160}
                className="w-40 h-40 rounded-full mb-4 object-cover"
              />
                <h3 className="text-xl font-semibold mb-1">Elena Rodriguez</h3>
                <p className="text-iris-purple mb-3">Creative Director</p>
                <p className="text-onyx/70 text-sm">Award-winning designer specializing in high-conversion ad creative and landing page optimization.</p>
              </div>
            </div>
          </div>
          
          {/* Values Section */}
          <div className="bg-deep-navy text-white rounded-3xl p-8 md:p-12">
            <h2 className="text-2xl md:text-3xl font-semibold mb-8">Our Values</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-xl font-semibold mb-3 flex items-center">
                  <span className="mr-3 w-8 h-8 bg-iris-purple/30 rounded-full flex items-center justify-center text-mint-green">1</span>
                  Data-Driven Decisions
                </h3>
                <p className="text-white/80 mb-4">We let data guide our strategy, not assumptions. Every decision is backed by numbers and performance metrics.</p>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold mb-3 flex items-center">
                  <span className="mr-3 w-8 h-8 bg-iris-purple/30 rounded-full flex items-center justify-center text-mint-green">2</span>
                  Radical Transparency
                </h3>
                <p className="text-white/80 mb-4">Full visibility into your campaigns, spending, and results. No hidden fees, no markup on ad spend.</p>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold mb-3 flex items-center">
                  <span className="mr-3 w-8 h-8 bg-iris-purple/30 rounded-full flex items-center justify-center text-mint-green">3</span>
                  Continuous Optimization
                </h3>
                <p className="text-white/80 mb-4">We're never satisfied with "good enough." Our iterative process ensures consistent improvement over time.</p>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold mb-3 flex items-center">
                  <span className="mr-3 w-8 h-8 bg-iris-purple/30 rounded-full flex items-center justify-center text-mint-green">4</span>
                  Results Guarantee
                </h3>
                <p className="text-white/80 mb-4">We stand behind our work with performance guarantees. If we don't deliver, you don't pay full price.</p>
              </div>
            </div>
          </div>
          
          {/* CTA Section */}
          <div className="bg-white rounded-3xl p-8 md:p-12 border border-iris-purple/10">
            <div className="max-w-3xl mx-auto text-center">
              <h2 className="text-2xl md:text-3xl font-semibold mb-6">Ready to Work With Us?</h2>
              <p className="text-lg text-onyx/80 mb-8">Schedule a discovery call to see if we're the right fit for your e-commerce growth goals.</p>
              <button 
                onClick={openLeadForm}
                className="bg-iris-purple hover:bg-iris-purple-light text-white py-4 px-8 rounded-full font-semibold transition-colors duration-300"
              >
                Book Free Discovery Call
              </button>
            </div>
          </div>
        </div>
      </div>

      <Footer />
    </main>
  );
}

================
File: app/components/sections/Footer.tsx
================
'use client';

import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import Image from 'next/image';
import Link from 'next/link';

const Footer = () => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  return (
    <footer className="bg-onyx text-white py-16 relative">
      <div ref={ref} className="container mx-auto px-6 md:px-12">
        <motion.div
          initial="hidden"
          animate={inView ? "visible" : "hidden"}
          variants={fadeUp}
          className="flex flex-col items-center text-center"
        >
          {/* Logo and value proposition */}
          <Image
            src="/images/logo-grey.png"
            alt="Zentric Digital Logo"
            width={80}
            height={21}
            className="mb-6"
          />
          
          <p className="text-white/70 mb-8 max-w-md text-center">
          Transform underperforming funnels into profit machines in just 90 days. We help e-commerce businesses scale rapidly with high-converting Meta Ads and proven CRO strategies.
</p>
          
          {/* CTA Button */}
          <Link 
            href="/contact"
            className="bg-iris-purple hover:bg-iris-purple/90 text-white font-medium px-8 py-3 rounded-md transition-all duration-300 hover:shadow-lg mb-16"
          >
            Book Your Strategy Call
          </Link>
          
          {/* Minimal bottom section */}
          <div className="w-full pt-8 border-t border-white/10 flex flex-col md:flex-row justify-between items-center">
            <div className="text-white/50 text-sm mb-4 md:mb-0">
              © {new Date().getFullYear()} Zentric Digital. All rights reserved.
            </div>
            <div className="flex space-x-6">
              <a href="/privacy" className="text-white/50 hover:text-mint-green text-sm transition-colors">Privacy Policy</a>
              <a href="/terms" className="text-white/50 hover:text-mint-green text-sm transition-colors">Terms of Service</a>
            </div>
          </div>
        </motion.div>
      </div>
    </footer>
  );
};

export default Footer;

// reasoning: The footer completes the landing page with important navigational elements
// and legal links, while reinforcing the brand message one last time. The layout
// follows a conventional pattern that users expect, improving usability. Social media
// links add credibility and additional contact points.

================
File: app/components/ui/Navigation.tsx
================
'use client';

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { usePathname } from 'next/navigation';
import { useLeadForm } from '../../contexts/LeadFormContext';

const Navigation = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isQuickStartOpen, setIsQuickStartOpen] = useState(false);
  const quickStartRef = useRef<HTMLDivElement>(null);
  const pathname = usePathname();
  const { openLeadForm } = useLeadForm();

  // Handle scroll effect for sticky header
  useEffect(() => {
    const handleScroll = () => {
      const scrollPosition = window.scrollY;
      setIsScrolled(scrollPosition > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Handle click outside for dropdown
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (quickStartRef.current && !quickStartRef.current.contains(event.target as Node)) {
        setIsQuickStartOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Lock body scroll when mobile menu is open
  useEffect(() => {
    if (isMobileMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMobileMenuOpen]);

  const quickStartSections = [
    { label: 'The Challenge', href: '#challenge' },
    { label: 'Our Solution', href: '#solution' },
    { label: 'The Zentric Way', href: '#process' },
    { label: 'Let\'s Talk', href: '#contact' },
  ];

  const dropdownVariants = {
    hidden: { opacity: 0, y: -5, transition: { duration: 0.2 } },
    visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },
    exit: { opacity: 0, y: -5, transition: { duration: 0.2 } },
  };

  const ctaButtonVariants = {
    rest: { scale: 1 },
    hover: { scale: 1.05, boxShadow: '0 10px 20px rgba(99, 91, 255, 0.2)' },
    tap: { scale: 0.95 }
  };

  return (
    <>
      {/* Sticky Header */}
      <header 
        className={`fixed top-0 left-0 w-full py-3 px-8 flex justify-between items-center z-50 transition-all duration-300 bg-ivory-background ${
          isScrolled 
            ? 'border-b border-onyx/10 shadow-sm' 
            : ''
        }`}
      >
        <Link href="/">
          <Image
            src="/images/logo-purple.png"
            alt="Zentric Digital Logo"
            width={60}
            height={16}
            priority
          />
        </Link>
        
        {/* Navigation Links - hidden on mobile */}
        <nav className="hidden md:flex items-center space-x-10">
          {/* Quick Start Dropdown */}
          <div 
            ref={quickStartRef} 
            className="relative"
            onMouseEnter={() => setIsQuickStartOpen(true)}
            onMouseLeave={() => setIsQuickStartOpen(false)}
          >
            <button 
              className="flex items-center text-onyx hover:text-iris-purple transition-colors duration-200 font-medium text-base relative group"
            >
              <span>Quick Start</span>
              <motion.svg 
                className="ml-1 w-4 h-4"
                animate={{ rotate: isQuickStartOpen ? 180 : 0 }}
                transition={{ duration: 0.3, type: "spring", stiffness: 200 }}
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </motion.svg>
              
              {/* Hover gradient underline */}
              <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-iris-purple to-mint-green group-hover:w-full transition-all duration-200 ease-out"></span>
            </button>
            
            <AnimatePresence>
              {isQuickStartOpen && (
                <motion.div
                  variants={dropdownVariants}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  className="absolute top-full left-0 mt-2 w-[280px] z-50"
                >
                  <div className="bg-deep-navy backdrop-blur-2xl bg-opacity-75 rounded-3xl border border-white/16 shadow-[0_4px_24px_rgba(0,0,0,0.18)] overflow-hidden">
                    <ul className="py-2">
                      {quickStartSections.map((section, index) => (
                        <motion.li 
                          key={index}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.2, delay: index * 0.05 }}
                        >
                          <a 
                            href={section.href}
                            onClick={() => setIsQuickStartOpen(false)}
                            className="flex px-5 py-3 text-nordic-ivory hover:bg-iris-purple/15 transition-all duration-100 ease-out group relative"
                          >
                            <span className="absolute left-0 top-0 bottom-0 w-0 bg-mint-green group-hover:w-[3px] transition-all duration-100"></span>
                            <span>{section.label}</span>
                          </a>
                        </motion.li>
                      ))}
                    </ul>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          <Link 
            href="/how-we-work" 
            className={`text-onyx hover:text-iris-purple transition-colors duration-200 font-medium text-base relative group ${
              pathname === '/how-we-work' ? 'text-iris-purple' : ''
            }`}
          >
            How We Work
            <span className={`absolute -bottom-1 left-0 h-0.5 bg-gradient-to-r from-iris-purple to-mint-green transition-all duration-200 ease-out ${
              pathname === '/how-we-work' ? 'w-full' : 'w-0 group-hover:w-full'
            }`}></span>
          </Link>
          <Link 
            href="/about-us" 
            className={`text-onyx hover:text-iris-purple transition-colors duration-200 font-medium text-base relative group ${
              pathname === '/about-us' ? 'text-iris-purple' : ''
            }`}
          >
            About Us
            <span className={`absolute -bottom-1 left-0 h-0.5 bg-gradient-to-r from-iris-purple to-mint-green transition-all duration-200 ease-out ${
              pathname === '/about-us' ? 'w-full' : 'w-0 group-hover:w-full'
            }`}></span>
          </Link>
          <Link 
            href="/cases" 
            className={`text-onyx hover:text-iris-purple transition-colors duration-200 font-medium text-base relative group ${
              pathname === '/cases' ? 'text-iris-purple' : ''
            }`}
          >
            Cases
            <span className={`absolute -bottom-1 left-0 h-0.5 bg-gradient-to-r from-iris-purple to-mint-green transition-all duration-200 ease-out ${
              pathname === '/cases' ? 'w-full' : 'w-0 group-hover:w-full'
            }`}></span>
          </Link>
        </nav>
        
        {/* CTA Button with improved hover effect */}
        <div className="hidden md:block">
          <motion.button 
            onClick={openLeadForm}
            variants={ctaButtonVariants}
            initial="rest"
            whileHover="hover"
            whileTap="tap"
            className="py-3 px-8 text-white font-semibold rounded-full relative z-10 bg-gradient-to-r from-[#635BFF] to-[#7A6CFF] will-change-transform"
          >
            Book Free Discovery Call
          </motion.button>
        </div>

        {/* Mobile Menu Button */}
        <button
          className="md:hidden p-2"
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
          aria-label="Toggle mobile menu"
        >
          <div className="w-6 flex flex-col items-end space-y-1.5">
            <span 
              className={`block h-0.5 bg-onyx transition-all duration-300 ${
                isMobileMenuOpen ? 'w-6 translate-y-2 rotate-45' : 'w-6'
              }`}
            ></span>
            <span 
              className={`block h-0.5 bg-onyx transition-all duration-300 ${
                isMobileMenuOpen ? 'opacity-0' : 'w-4'
              }`}
            ></span>
            <span 
              className={`block h-0.5 bg-onyx transition-all duration-300 ${
                isMobileMenuOpen ? 'w-6 -translate-y-2 -rotate-45' : 'w-5'
              }`}
            ></span>
          </div>
        </button>
      </header>

      {/* Mobile Menu */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="fixed top-[72px] left-0 right-0 z-40 md:hidden shadow-lg border-b border-onyx/10 backdrop-blur-md"
            style={{ backgroundColor: 'rgba(245, 240, 234, 0.9)' }}
          >
            <div className="container mx-auto px-8 py-6 flex flex-col space-y-4">
              {/* Quick Start Dropdown in mobile menu */}
              <div className="border-b border-onyx/10 pb-4">
                <div className="font-medium mb-2 text-onyx">Quick Start</div>
                <ul className="pl-4 space-y-2">
                  {quickStartSections.map((section, index) => (
                    <motion.li 
                      key={index}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.2, delay: 0.1 + index * 0.05 }}
                    >
                      <a 
                        href={section.href}
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="block py-2 text-sm text-onyx/80 hover:text-iris-purple transition-colors duration-200"
                      >
                        {section.label}
                      </a>
                    </motion.li>
                  ))}
                </ul>
              </div>
              
              <Link
                href="/how-we-work"
                className={`block py-3 ${
                  pathname === '/how-we-work' ? 'text-iris-purple' : 'text-onyx hover:text-iris-purple'
                } transition-colors duration-200`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                How We Work
              </Link>
              <Link
                href="/about-us"
                className={`block py-3 ${
                  pathname === '/about-us' ? 'text-iris-purple' : 'text-onyx hover:text-iris-purple'
                } transition-colors duration-200`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                About Us
              </Link>
              <Link
                href="/cases"
                className={`block py-3 ${
                  pathname === '/cases' ? 'text-iris-purple' : 'text-onyx hover:text-iris-purple'
                } transition-colors duration-200`}
                onClick={() => setIsMobileMenuOpen(false)}
              >
                Cases
              </Link>
              <div className="pt-2">
                <motion.button 
                  onClick={() => {
                    openLeadForm();
                    setIsMobileMenuOpen(false);
                  }}
                  variants={ctaButtonVariants}
                  initial="rest"
                  whileHover="hover"
                  whileTap="tap"
                  className="w-full py-3 px-8 text-white font-semibold rounded-full bg-gradient-to-r from-[#635BFF] to-[#7A6CFF] will-change-transform"
                >
                  Book Free Discovery Call
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default Navigation;

================
File: app/contexts/LeadFormContext.tsx
================
'use client';

import React, { createContext, useState, useContext, ReactNode } from 'react';
import LeadForm from '../components/ui/LeadForm';

type FormData = {
  revenue: string;
  budget: string;
  website: string;
  firstName: string;
  lastName: string;
  phone: string;
  email: string;
  referralSource: string;
}

type LeadFormContextType = {
  openLeadForm: () => void;
  closeLeadForm: () => void;
  isFormOpen: boolean;
  isFormSubmitted: boolean;
  capturedEmail: string | null;
};

const LeadFormContext = createContext<LeadFormContextType | undefined>(undefined);

export const useLeadForm = () => {
  const context = useContext(LeadFormContext);
  if (!context) {
    throw new Error('useLeadForm must be used within a LeadFormProvider');
  }
  return context;
};

type LeadFormProviderProps = {
  children: ReactNode;
};

export const LeadFormProvider = ({ children }: LeadFormProviderProps) => {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isFormSubmitted, setIsFormSubmitted] = useState(false);
  const [capturedEmail, setCapturedEmail] = useState<string | null>(null);

  const openLeadForm = () => {
    setIsFormOpen(true);
  };

  const closeLeadForm = () => {
    setIsFormOpen(false);
  };

  const handleFormSubmit = (data: FormData) => {
    // Here you would typically send the data to your backend
    console.log('Form submitted:', data);
    setCapturedEmail(data.email);
    setIsFormOpen(false);
    setIsFormSubmitted(true);
    
    // You can add API calls here to submit the data
    // Example:
    // fetch('/api/leads', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(data),
    // });
  };

  return (
    <LeadFormContext.Provider
      value={{
        openLeadForm,
        closeLeadForm,
        isFormOpen,
        isFormSubmitted,
        capturedEmail,
      }}
    >
      {children}
      
      {/* Lead Form */}
      <LeadForm 
        isOpen={isFormOpen} 
        onClose={closeLeadForm} 
        onSubmit={handleFormSubmit} 
      />
    </LeadFormContext.Provider>
  );
};

================
File: app/layout.tsx
================
import type { Metadata } from 'next'
import './globals.css'
import Providers from './providers'

export const metadata: Metadata = {
  title: 'Zentric Digital - Make Noise. Stay Zentric.',
  description: "Transform under-performing funnels into compounding profit engines in 30 days — or you don't pay. DTC ecommerce growth through CRO, Meta Ads, and Lifecycle Email.",
  keywords: 'ecommerce growth, CRO, conversion rate optimization, Meta ads, DTC brands, lifecycle email',
  metadataBase: new URL('https://zentric.digital'),
  icons: {
    icon: '/images/favicon.png',
  },
  openGraph: {
    title: 'Zentric Digital - Make Noise. Stay Zentric.',
    description: "Transform under-performing funnels into compounding profit engines in 30 days — or you don't pay.",
    url: 'https://zentric.digital',
    siteName: 'Zentric Digital',
    images: [
      {
        url: '/images/og-image.png',
        width: 1200,
        height: 630,
        alt: 'Zentric Digital',
      },
    ],
    locale: 'en_US',
    type: 'website',
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className="bg-ivory-background pt-20">
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  )
}

================
File: app/components/sections/HeroSection.tsx
================
'use client';

import { useState, useEffect, useRef, MutableRefObject } from 'react';
import type { CSSProperties } from 'react';
import { motion, AnimatePresence, useMotionValue, useTransform, useSpring, useScroll } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import Link from 'next/link';
import { useLeadForm } from '../../contexts/LeadFormContext';

// Create a function to merge refs
const useMergedRef = <T extends HTMLElement>(...refs: (MutableRefObject<T | null> | ((node: T) => void) | null)[]) => {
  return (node: T) => {
    refs.forEach(ref => {
      if (!ref) return;
      if (typeof ref === 'function') {
        ref(node);
      } else {
        ref.current = node;
      }
    });
  };
};

// Helper function to throttle function calls
const throttle = <T extends (...args: any[]) => any>(
  func: T,
  limit: number
): ((...args: Parameters<T>) => void) => {
  let inThrottle: boolean = false;
  return function(this: any, ...args: Parameters<T>) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
};

const HeroSection = () => {
  const { openLeadForm } = useLeadForm();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isQuickStartOpen, setIsQuickStartOpen] = useState(false);
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const quickStartRef = useRef<HTMLDivElement>(null);
  const heroRef = useRef<HTMLDivElement>(null);
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });
  
  // Use this to avoid hydration mismatches
  useEffect(() => {
    setIsClient(true);
  }, []);
  
  // Only initialize scroll tracking on client-side to avoid hydration mismatch
  const { scrollYProgress } = useScroll({
    target: heroRef,
    offset: ["start start", "end start"]
  });
  
  // Mouse position for interactive background - initialize with default values
  const mouseX = useMotionValue(500);
  const mouseY = useMotionValue(400);
  
  // Initialize window-dependent values after component mounts
  useEffect(() => {
    if (typeof window !== 'undefined') {
      mouseX.set(window.innerWidth / 2);
      mouseY.set(window.innerHeight / 2);
      
      // Check for reduced motion preference
      const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
      setPrefersReducedMotion(mediaQuery.matches);
      
      const handleChange = () => setPrefersReducedMotion(mediaQuery.matches);
      mediaQuery.addEventListener('change', handleChange);
      return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, [mouseX, mouseY]);
  
  // Separate useEffect for reduced motion to avoid dependency issues
  useEffect(() => {
    setIsClient(true); // Mark as client-side rendered
  }, []);
  
  // Parallax effect values - reduced range for subtlety
  // Only calculate transforms on client-side to avoid hydration mismatches
  const parallaxX = useTransform(
    mouseX, 
    [0, isClient ? window.innerWidth : 1000], 
    [-2, 2]
  );
  const parallaxY = useTransform(
    mouseY, 
    [0, isClient ? window.innerHeight : 800], 
    [-2, 2]
  );
  
  // Higher damping for smoother movement
  const smoothParallaxX = useSpring(parallaxX, { damping: 100, stiffness: 200 });
  const smoothParallaxY = useSpring(parallaxY, { damping: 100, stiffness: 200 });
  
  // Handle mouse move for interactive elements - with throttling
  useEffect(() => {
    if (!isClient || prefersReducedMotion) return;
    
    // Throttle the mouse move handler to improve performance
    const handleMouseMove = throttle((e: MouseEvent) => {
      mouseX.set(e.clientX);
      mouseY.set(e.clientY);
    }, 25); // 25ms throttle
    
    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, [mouseX, mouseY, prefersReducedMotion, isClient]);

  // Handle scroll effect for sticky header
  useEffect(() => {
    if (!isClient) return;
    
    const handleScroll = throttle(() => {
      const scrollPosition = window.scrollY;
      setIsScrolled(scrollPosition > 50);
    }, 50); // 50ms throttle

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isClient]);

  // Close quick start menu when clicking outside
  useEffect(() => {
    if (!isClient) return;
    
    const handleClickOutside = (event: MouseEvent) => {
      if (quickStartRef.current && !quickStartRef.current.contains(event.target as Node)) {
        setIsQuickStartOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isClient]);

  // Lock body scroll when mobile menu is open
  useEffect(() => {
    if (!isClient) return;
    
    if (isMobileMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMobileMenuOpen, isClient]);

  const fadeUp = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { 
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };

  // Staggered animation for children
  const container = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15
      }
    }
  };

  // Quick start dropdown animation
  const dropdownVariants = {
    hidden: { opacity: 0, y: -10, scale: 0.95 },
    visible: { 
      opacity: 1, 
      y: 0, 
      scale: 1,
      transition: { 
        type: "spring", 
        stiffness: 50, 
        duration: 0.3,
        delay: 0.1 
      }
    },
    exit: { 
      opacity: 0, 
      scale: 0.95, 
      transition: { duration: 0.2, ease: "easeOut" }
    }
  };
  
  // Text reveal animation for the hero title
  const revealText = {
    hidden: { 
      opacity: 0,
      y: 20
    },
    visible: { 
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: [0.16, 1, 0.3, 1],
        delayChildren: 0.2,
        staggerChildren: 0.05
      }
    }
  };
  
  // Character animation for typed text effect
  const characterAnimation = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.4,
        ease: [0.16, 1, 0.3, 1]
      }
    }
  };
  
  // Continuous subtle animation for CTA buttons - made more obvious
  const ctaPulseAnimation = {
    initial: { 
      scale: 1,
      boxShadow: "0px 0px 0px 0px rgba(99, 91, 255, 0)" 
    },
    animate: { 
      scale: [1, 1.05, 1],
      boxShadow: [
        "0px 0px 0px 0px rgba(99, 91, 255, 0)",
        "0px 0px 15px 3px rgba(99, 91, 255, 0.4)",
        "0px 0px 0px 0px rgba(99, 91, 255, 0)"
      ],
      transition: {
        duration: 2.5,
        times: [0, 0.5, 1],
        repeat: Infinity,
        repeatType: "loop" as const,
        ease: "easeInOut"
      }
    }
  };
  
  // Simplified CTA button variants
  const ctaButtonVariants = {
    rest: { 
      scale: 1,
      boxShadow: "0px 0px 0px 0px rgba(99, 91, 255, 0)"
    },
    hover: { 
      scale: 1.04,
      boxShadow: "0px 0px 10px 0px rgba(99, 91, 255, 0.3)",
      transition: {
        duration: 0.3,
        ease: "easeOut"
      }
    },
    tap: { 
      scale: 0.98,
      transition: {
        duration: 0.1,
        ease: "easeOut"
      }
    }
  };

  const quickStartSections = [
    { label: "The Challenge", href: "#challenge" },
    { label: "Our Solution", href: "#solution" },
    { label: "The Zentric Way", href: "#process" },
    { label: "Let's Talk", href: "#contact" },
  ];
  
  // Animated number counter
  const Counter = ({ value, label, delay = 0 }: { value: string; label: string; delay?: number }) => {
    const valueRef = useRef<HTMLSpanElement>(null);
    
    useEffect(() => {
      if (!isClient || !inView || !valueRef.current || prefersReducedMotion) return;
      
      const rawValue = valueRef.current.textContent || "";
      const isPercentage = rawValue.includes("%");
      const isMultiplier = rawValue.includes("x");
      let numericValue = parseFloat(rawValue.replace(/[^\d.-]/g, ""));
      
      // Don't animate if the value isn't actually a number
      if (isNaN(numericValue)) return;
      
      // For negative values, adjust starting point
      const startValue = numericValue < 0 ? numericValue * 1.5 : 0;
      const endValue = numericValue;
      
      let startTime: number | null = null;
      const duration = 1000; // 1 second animation as per brand guideline
      
      const formatValue = (value: number) => {
        return (isPercentage ? 
          (value >= 0 ? "+" : "") + value.toFixed(0) + "%" :
          (isMultiplier ? value.toFixed(1) + "x" : value.toFixed(0))
        );
      };
      
      // Pre-calculate animation frames to reduce layout thrashing
      const frames: string[] = [];
      const frameCount = 60; // Approximately 60fps for 1 second
      
      for (let i = 0; i <= frameCount; i++) {
        const progress = i / frameCount;
        const currentValue = startValue + (endValue - startValue) * progress;
        frames.push(formatValue(currentValue));
      }
      
      let frameIndex = 0;
      const updateFrame = () => {
        if (frameIndex <= frameCount && valueRef.current) {
          valueRef.current.textContent = frames[frameIndex];
          frameIndex++;
          requestAnimationFrame(updateFrame);
        }
      };
      
      // Add delay before starting animation
      const timeoutId = setTimeout(() => {
        requestAnimationFrame(updateFrame);
      }, delay);
      
      return () => clearTimeout(timeoutId);
    }, [inView, value, delay, prefersReducedMotion, isClient]);
    
    return (
      <div className="flex flex-col items-center justify-center h-10 md:h-16">
        <span ref={valueRef} className="text-mint-green text-lg md:text-xl lg:text-2xl font-bold tracking-wider font-mono uppercase">{value}</span>
        <span className="text-white/70 text-[10px] md:text-xs mt-0.5 md:mt-1 text-center">{label}</span>
      </div>
    );
  };

  // Create a merged ref for both inView and heroRef
  const mergedRef = useMergedRef(ref, heroRef);

  // Create a CSS variable for the mouse position - safely handle SSR
  const bgStyle: CSSProperties = isClient ? {
    '--mouse-x': mouseX.get() + 'px',
    '--mouse-y': mouseY.get() + 'px',
    position: 'relative' // Ensure scroll tracking works correctly
  } as CSSProperties : { position: 'relative' };

  return (
    <section 
      ref={mergedRef}
      className="min-h-screen h-auto flex flex-col justify-between bg-nordic-ivory relative"
      style={{ ...bgStyle, overflow: 'visible' }}
    >
      {/* Static background gradient */}
      <div className="absolute inset-0 bg-gradient-to-br from-iris-purple/5 to-mint-green/5 z-0" />
      
      {/* Subtle geometric patterns */}
      <div className="absolute inset-0 z-0 pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-64 h-64 rounded-full bg-iris-purple/5 blur-3xl" />
        <div className="absolute bottom-1/3 right-1/3 w-96 h-96 rounded-full bg-mint-green/5 blur-3xl" />
      </div>
      
      {/* Interactive background - using CSS instead of inline style for better performance */}
      {isClient && !prefersReducedMotion && (
        <div 
          className="absolute inset-0 z-0 opacity-30 transition-opacity duration-500"
          style={{
            background: `radial-gradient(circle at var(--mouse-x) var(--mouse-y), rgba(99,91,255,0.15), rgba(83,221,108,0.08) 40%, rgba(245,240,234,0) 80%)`
          }}
        />
      )}
      
      {/* Mobile Menu */}
      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="fixed top-[72px] left-0 right-0 z-40 md:hidden shadow-lg border-b border-onyx/10 backdrop-blur-md"
            style={{ backgroundColor: 'rgba(245, 240, 234, 0.9)' }}
          >
            <div className="container mx-auto px-8 py-6 flex flex-col space-y-4">
              {/* Quick Start Dropdown in mobile menu */}
              <div className="border-b border-onyx/10 pb-4">
                <div className="font-medium mb-2 text-onyx">Quick Start</div>
                <ul className="pl-4 space-y-2">
                  {quickStartSections.map((section, index) => (
                    <motion.li 
                      key={index}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.2, delay: 0.1 + index * 0.05 }}
                    >
                      <a 
                        href={section.href}
                        onClick={() => setIsMobileMenuOpen(false)}
                        className="block py-2 text-sm text-onyx/80 hover:text-iris-purple transition-colors duration-200"
                      >
                        {section.label}
                      </a>
                    </motion.li>
                  ))}
                </ul>
              </div>
              
              <Link
                href="/how-we-work"
                className="block py-3 text-onyx hover:text-iris-purple transition-colors duration-200"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                How We Work
              </Link>
              <Link
                href="/about-us"
                className="block py-3 text-onyx hover:text-iris-purple transition-colors duration-200"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                About Us
              </Link>
              <Link
                href="/cases"
                className="block py-3 text-onyx hover:text-iris-purple transition-colors duration-200"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                Cases
              </Link>
              <div className="pt-2">
                <button 
                  onClick={() => {
                    openLeadForm();
                    setIsMobileMenuOpen(false);
                  }}
                  className="w-full py-3 px-8 text-white font-semibold rounded-full bg-gradient-to-r from-[#635BFF] to-[#7A6CFF]"
                >
                  Book Free Discovery Call
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <motion.div 
        className="container mx-auto px-6 md:px-8 pt-8 md:pt-16 pb-4 z-10 text-center md:text-left max-w-7xl flex-1 flex flex-col justify-center"
        variants={container}
        initial="hidden"
        animate={inView ? "visible" : "hidden"}
        style={{ overflow: 'visible', clipPath: 'none' }}
      >
        {/* Grid layout for desktop, stack for mobile */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 lg:gap-12 items-center" style={{ overflow: 'visible' }}>
          {/* Left column: Text content */}
          <div className="space-y-1 md:space-y-3" style={{ overflow: 'visible', clipPath: 'none', padding: '0 0 0.5em 0' }}>
            <motion.div variants={fadeUp} className="">
              <p className="text-iris-purple font-medium tracking-wider uppercase text-sm">Digital Growth Agency</p>
            </motion.div>

            <motion.h1 
              variants={revealText} 
              className="text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-extrabold leading-none -tracking-[2px] whitespace-nowrap"
              style={{ overflow: 'visible', lineHeight: '1.1', paddingBottom: '0.1em' }}
            >
              <div className="whitespace-nowrap">Make Noise.</div>
              <span 
                className="bg-gradient-to-r from-mint-green to-iris-purple bg-clip-text text-transparent whitespace-nowrap"
                style={{ 
                  display: 'inline-block', 
                  overflow: 'visible', 
                  paddingBottom: '0.1em',
                  position: 'relative',
                  zIndex: 10
                }}
              >
                Stay Zentric.
              </span>
            </motion.h1>

            <motion.p 
              variants={fadeUp} 
              className="text-sm md:text-lg lg:text-xl text-deep-navy/80 max-w-3xl mt-0"
            >
              Transform underperforming funnels into profit machines in just 90 days. We help e-commerce businesses scale rapidly with high-converting Meta Ads and proven CRO strategies.
            </motion.p>

            <motion.div variants={fadeUp} className="flex flex-col md:flex-row gap-4 pt-2">
              <motion.button 
                onClick={openLeadForm}
                variants={ctaButtonVariants}
                initial="rest"
                whileHover="hover"
                whileTap="tap"
                animate={isClient ? ctaPulseAnimation.animate : undefined}
                className="py-3 md:py-4 px-6 md:px-8 text-white font-semibold rounded-full whitespace-nowrap bg-gradient-to-r from-[#635BFF] to-[#7A6CFF] will-change-transform"
              >
                Book Free Discovery Call
              </motion.button>
              
              <div className="flex justify-center md:justify-start md:flex-row items-center gap-3 mt-2 md:mt-0 md:ml-8 w-full md:w-auto">
                <div className="w-12 h-px bg-deep-navy/20 hidden md:block"></div>
                <p className="text-deep-navy/70 font-medium text-sm md:text-base text-center md:text-left">
                  At least <span className="text-iris-purple font-bold">3×</span> ROAS in 90 days
                </p>
              </div>
            </motion.div>
          </div>

          {/* Right column: Dashboard mockup with refined parallax effect */}
          <div className="flex flex-col items-center mt-6 md:mt-0 relative">
            {isClient && (
              <motion.div 
                variants={fadeUp}
                style={!prefersReducedMotion ? {
                  x: smoothParallaxX,
                  y: smoothParallaxY
                } : {}}
                className="mx-auto lg:mx-0 max-w-xl w-full p-1 md:p-2 rounded-2xl overflow-hidden will-change-transform relative"
                whileHover={{ 
                  scale: 1.01,
                  transition: { duration: 0.4, ease: "easeOut" }
                }}
              >
                <div className="bg-deep-navy backdrop-blur-xl bg-opacity-75 rounded-3xl border border-white/16 shadow-[0_4px_24px_rgba(0,0,0,0.18)] p-1 md:p-4 overflow-hidden">
                  <div className="bg-gradient-to-r from-iris-purple/10 to-mint-green/10 rounded-lg p-3 md:p-6">
                    <div className="flex justify-between items-center mb-3 md:mb-6">
                      <div className="text-white text-sm md:text-base font-bold">Performance Dashboard</div>
                      <div className="text-mint-green text-sm md:text-base font-mono tracking-wider">+38% ROAS</div>
                    </div>
                    
                    {/* Progress bar with improved animation */}
                    <div className="mb-3 md:mb-6 bg-white/10 h-1.5 md:h-2 rounded-full overflow-hidden">
                      <motion.div 
                        className="h-full bg-gradient-to-r from-iris-purple to-mint-green"
                        initial={{ width: "0%" }}
                        animate={{ width: "75%" }}
                        transition={{ 
                          duration: 1.5, 
                          delay: 0.5, 
                          ease: "easeOut" 
                        }}
                      />
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 md:gap-6">
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <Counter value="+42%" label="Average ROAS" delay={100} />
                      </div>
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <Counter value="-28%" label="CPA reduction" delay={200} />
                      </div>
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <Counter value="4.2x" label="Ads revenue" delay={300} />
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
            {!isClient && (
              <div className="mx-auto lg:mx-0 max-w-xl w-full p-1 md:p-2 rounded-2xl overflow-hidden will-change-transform relative">
                <div className="bg-deep-navy backdrop-blur-xl bg-opacity-75 rounded-3xl border border-white/16 shadow-[0_4px_24px_rgba(0,0,0,0.18)] p-1 md:p-4 overflow-hidden">
                  <div className="bg-gradient-to-r from-iris-purple/10 to-mint-green/10 rounded-lg p-3 md:p-6">
                    <div className="flex justify-between items-center mb-3 md:mb-6">
                      <div className="text-white text-sm md:text-base font-bold">Performance Dashboard</div>
                      <div className="text-mint-green text-sm md:text-base font-mono tracking-wider">+38% ROAS</div>
                    </div>
                    
                    <div className="mb-3 md:mb-6 bg-white/10 h-1.5 md:h-2 rounded-full overflow-hidden">
                      <div className="h-full bg-gradient-to-r from-iris-purple to-mint-green w-[75%]" />
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 md:gap-6">
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <div className="flex flex-col items-center justify-center h-10 md:h-16">
                          <span className="text-mint-green text-lg md:text-xl lg:text-2xl font-bold tracking-wider font-mono uppercase">+42%</span>
                          <span className="text-white/70 text-[10px] md:text-xs mt-0.5 md:mt-1 text-center">Average ROAS</span>
                        </div>
                      </div>
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <div className="flex flex-col items-center justify-center h-10 md:h-16">
                          <span className="text-mint-green text-lg md:text-xl lg:text-2xl font-bold tracking-wider font-mono uppercase">-28%</span>
                          <span className="text-white/70 text-[10px] md:text-xs mt-0.5 md:mt-1 text-center">CPA reduction</span>
                        </div>
                      </div>
                      <div className="bg-white/5 rounded-lg p-2 md:p-3 backdrop-blur-md border border-white/5">
                        <div className="flex flex-col items-center justify-center h-10 md:h-16">
                          <span className="text-mint-green text-lg md:text-xl lg:text-2xl font-bold tracking-wider font-mono uppercase">4.2x</span>
                          <span className="text-white/70 text-[10px] md:text-xs mt-0.5 md:mt-1 text-center">Ads revenue</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <motion.p 
              variants={fadeUp} 
              className="text-xs md:text-sm lg:text-base text-deep-navy/80 mt-2 md:mt-4 text-center max-w-md mx-auto"
            >
              No fluff, no false promises - just real, measurable results.
            </motion.p>
          </div>
        </div>
      </motion.div>

      {/* Bottom section with improved scroll indicator */}
      <div className="relative pb-2 hidden md:flex justify-center items-center">
        <motion.div 
          className="mb-2"
          animate={{ y: [0, 10, 0] }}
          transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
        >
          <div className="w-5 h-8 border-2 border-deep-navy/30 rounded-full flex justify-center pt-1">
            <motion.div 
              className="w-1 h-1 bg-gradient-to-r from-iris-purple to-mint-green rounded-full"
              animate={{ 
                y: [0, 10, 0],
                scale: [1, 1.2, 1]
              }}
              transition={{ 
                duration: 2, 
                repeat: Infinity,
                ease: "easeInOut"
              }}
            />
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default HeroSection;

// reasoning: Hero section uses motion and staggered animations to draw attention
// The scroll depth is tracked for analytics. The CTA is prominently placed with
// social proof ("Guaranteed +28% ROAS") to reduce conversion friction.

================
File: app/page.tsx
================
'use client';

import { useEffect } from 'react';
import HeroSection from './components/sections/HeroSection';
import Comparison from './components/sections/Comparison';
import SolutionSection from './components/sections/SolutionSection';
import Guarantees from './components/sections/Guarantees';
import FinalCTA from './components/sections/FinalCTA';
import Footer from './components/sections/Footer';
import Navigation from './components/ui/Navigation';

export default function Home() {
  // Track scroll depth for analytics
  useEffect(() => {
    const handleScroll = () => {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const docHeight = document.body.offsetHeight;
      const scrollPercentage = (scrollPosition / (docHeight - windowHeight)) * 100;
      
      // Would normally push to GTM/GA4
      console.log(`Scroll depth: ${Math.round(scrollPercentage)}%`);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <main className="overflow-x-hidden">
      <Navigation />
      <HeroSection />
      <Comparison />
      <SolutionSection />
      <Guarantees />
      <FinalCTA />
      <Footer />
    </main>
  );
}




================================================================
End of Codebase
================================================================
